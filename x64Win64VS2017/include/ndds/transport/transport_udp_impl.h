/* (c) Copyright 2003-2021, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)transport_udp_impl.h    generated by: makeheader    Fri Apr 23 00:11:23 2021
 *
 *		built from:	udp_impl.ifc
 */

#ifndef transport_udp_impl_h
#define transport_udp_impl_h


#include "osapi/osapi_type.h"
#include "osapi/osapi_socket.h"
#include "osapi/osapi_interfaceTracker.h"
#include "osapi/osapi_interfaces.h"
#ifndef reda_inlineList_h
  #include "reda/reda_inlineList.h"
#endif
#ifndef reda_skiplist_h
  #include "reda/reda_skiplist.h"
#endif
#ifndef transport_common_h
  #include "transport/transport_common.h"
#endif
#ifndef transport_udp_h
  #include "transport/transport_udp.h"
#endif
#ifdef __cplusplus
    extern "C" {
#endif


struct NDDS_Transport_IP_Interface_t {
    NDDS_Transport_Interface_t        _interface;  
    unsigned int                      _interfaceFlags;
    char _interfaceName[RTI_OSAPI_INTERFACE_NAME_LENGTH];
    int                               _interfaceIndex;
};

extern NDDS_Transport_DllExport
RTIOsapiSocketAFKind
NDDS_Transport_IP_get_family(NDDS_Transport_Plugin * self);

extern NDDS_Transport_DllExport
RTIBool NDDS_Transport_IP_isAddressAllowed(
        RTI_INT32 *multicast_enabled_out,
        const NDDS_Transport_Interface_t *interface_in,
        const char* interface_name_in,
        struct NDDS_Transport_Property_t * property,
        RTIOsapiSocketAFKind family);

extern NDDS_Transport_DllExport
RTIBool NDDS_Transport_IP_interfacesAreEqual(
    const struct NDDS_Transport_IP_Interface_t * interfaceA,
    const struct NDDS_Transport_IP_Interface_t * interfaceB,
    RTIOsapiSocketAFKind family);

extern NDDS_Transport_DllExport
RTI_INT32 NDDS_Transport_IP_query_interfaces(
    NDDS_Transport_Plugin * self,
    struct RTIOsapiInterfaceTracker * interfaceTracker,
    struct NDDS_Transport_IP_Interface_t ** outInterfaceArray,
    int * outInterfaceCount,
    int * outInterfaceArraySize,
    unsigned int requestedInterfacesMask,
    unsigned int reportIgnoreInterfaceWarnings,
    int auxSocket);

struct NDDS_Transport_IP_InterfaceListener;

typedef
RTI_INT32 (*NDDS_Transport_IP_OnIPInterfaceFnc)(
        struct NDDS_Transport_IP_InterfaceListener * interfaceListener,
        NDDS_Transport_Plugin * transportPlugin,
        struct NDDS_Transport_IP_Interface_t * ipInterface,
        RTI_INT32 * multicastEnabled);

struct NDDS_Transport_IP_InterfaceListener {
    NDDS_Transport_IP_OnIPInterfaceFnc onIpInterface;
};

extern NDDS_Transport_DllExport
RTIBool NDDS_Transport_IP_selectValidInterfaces(
    NDDS_Transport_Plugin * self,
    struct NDDS_Transport_IP_Interface_t * interfaceArray,
    struct NDDS_Transport_IP_Interface_t ** loopbackInterfaceOut,
    int * interfaceCountPt,
    RTIBool ignoreLoopbackInterfaceProperty,
    struct NDDS_Transport_IP_InterfaceListener * ipInterfaceListener);


#if defined(RTI_VXWORKS) && !defined(RTI_RTP) \
    && !VXWORKS_VERSION_6_5_OR_BETTER \
    && !defined(RTI_VX653) && !defined(VTHREADS)
    #define NDDS_TRANSPORT_UDP_SOCKET_ZERO_COPY_RECEIVE
#endif

/* The following architectures use close to unblock the socket */
#if defined(RTI_DARWIN) || defined(RTI_QNX) || defined(RTI_AIX) \
        || (defined(RTI_VXWORKS) \
                && !defined(NDDS_TRANSPORT_UDP_SOCKET_ZERO_COPY_RECEIVE)) \
        || defined(RTI_INTY) || defined(RTI_SOL2) || defined(RTI_INTIME)
  #define NDDS_TRANSPORT_UDP_USE_CLOSE_UNBLOCK_MECHANISM
#endif

/*
 * The following architectures do not send an unblocking message to unblock
 * the receive socket: they use different alternative mechanisms to achieve
 * the socket unblock (cancelIo, shutdown, close).
 */
#if defined(RTI_WIN32) || defined(RTI_LINUX) || \
        defined(NDDS_TRANSPORT_UDP_USE_CLOSE_UNBLOCK_MECHANISM)
  #define NDDS_TRANSPORT_UDP_USE_ALTERNATIVE_UNBLOCK_MECHANISM
#endif


struct NDDS_Transport_UDP_RecvResource_t {
    /*i Node structure for use in list. */
    struct REDAInlineListNode _node;

    RTI_INT32             socket;
    NDDS_Transport_Port_t port;

    RTIBool               is_multicast;
    /* multicast_address is used to send the unblock message. */
    NDDS_Transport_Address_t  multicast_address;
  #if !defined(RTI_VX653)    
    struct sockaddr *last_source_socket_address;
  #endif    
    RTIBool               is_unblocking;

    /*
     * List of shared receive rtps ports. It is guaranteed to have at least
     * one element. Access outside receive EA must be protected by the transport
     * mutex.
     *
     * We may end having more that one port if the RecvResource is serving
     * multiple RTPS ports. For example, this will be the case of UDPv4_WAN
     * transport. For each of the listed RTPS ports, we keep a refcount so we
     * can keep track of how many times the same RTPS port has been shared
     * by core (through a call to share_receive_resource). This way, if core
     * stop using one of the RTPS ports this RecvResource is serving, we will
     * remove it from the list.
     */
    struct NDDS_Transport_SharedPort_t *rcv_rtps_ports;
    int rcv_rtps_ports_count;
};


#define NDDS_TRANSPORT_UDP_MAPPED_TRANSPORT_PRIORITY_INVALID   (-1)

struct NDDS_Transport_UDP_WAN_PublicAddressMappingInfo;


typedef enum {
    NDDS_TRANSPORT_UDP_DESTINATION_KIND_UNKNOWN,
    NDDS_TRANSPORT_UDP_DESTINATION_KIND_REMOTE,
    NDDS_TRANSPORT_UDP_DESTINATION_KIND_LOCAL,
    NDDS_TRANSPORT_UDP_DESTINATION_KIND_SELF
} NDDS_Transport_UDP_DestinationKind;


#define NDDS_Transport_UDP_DestinationKind_isLocal(__destKind) \
    (__destKind == NDDS_TRANSPORT_UDP_DESTINATION_KIND_LOCAL \
            || __destKind == NDDS_TRANSPORT_UDP_DESTINATION_KIND_SELF)


struct NDDS_Transport_UDP_SendResource_t {
    /*i Node structure for use in list. */
    struct REDAInlineListNode _node;
    RTI_INT32             unisocket;
    NDDS_Transport_Port_t unisocket_port;
    RTI_INT32            *multisocket;
    int                   multiSocketArrayLength;
    RTI_INT32             transport_priority;
    RTI_INT32             mapped_transport_priority;

    /* This part of the status is only used for the UDP WAN mode. */
    struct NDDS_Transport_UDP_WAN_PublicAddressMappingInfo *public_addr_mapping;
    /*
     * Cached kind for all of the destinations a SendResource can manage. If set
     * to a value different from UNKNOWN, it is used during multiple SR
     * operations to make decisions about the destination without the need of
     * iterating through the local interfaces. Currently only used in UDP WAN
     * modes. For non-WAN UDP modes, it is always set to UNKNOWN and it is not
     * used.
     *
     *  - UNKNOWN: the SendResource destination kind is not cached. As such,
     *    the SendResource will need to make decisions about the destination
     *    based on the parameters passed to the current operation (e.g., send).
     *    For UDP WAN mode, we send binding pings to SR destinations marked as
     *    UNKNOWN.
     *  - REMOTE: the destination is remote: we should use the SendResource's
     *    dest_address and dest_rtps_port to do the sending. For UDP WAN mode,
     *    we send binding pings to REMOTE destinations.
     *  - LOCAL: the destination is local: we should use the loopback address as
     *    the destination. Also, if loopback interface is disabled, skip the
     *    destination. For UDP WAN mode, we send binding pings to LOCAL
     *    destinations.
     *  - SELF: the destination belongs to our transport plugin: we should use
     *    the loopback address as the destination. Also, if loopback interface
     *    is disabled, skip the destination. For UDP WAN mode, we do not send
     *    binding pings to SELF destinations.
     */
    NDDS_Transport_UDP_DestinationKind  dest_kind;
    NDDS_Transport_Address_t dest_address;
    NDDS_Transport_Port_t dest_rtps_port;
};


struct NDDS_Transport_UDP {
    NDDS_Transport_Plugin                       parent;
    RTIOsapiSocketAFKind                       _family;
    struct NDDS_Transport_UDP_Property_t     _property;
    struct NDDS_Transport_UDP_SocketFactory *_socketFactory;
    
    /* in charge of detecting and notifying interface changes */
    struct RTIOsapiInterfaceTracker  *           _interfaceTracker;

    /* for built-in performance measurement */
    struct RTIClock                   *_clock; 

    /*
     * Auxiliary socket to decouple certain operations from the unisocket. We
     * only use it for operations different from send/receive. For example,
     * we use it for sending the unblocking message to other local sockets, or
     * for retrieving the interfaces in certain architectures.
     *
     * It could be set to the unisocket in cases where the unisocket can be
     * used for doing all of the operations and there is no need to decouple
     * certain operations.
     */
    RTI_INT32                          _auxsocket;

    /* default sockets used to send */
    RTI_INT32                          _unisocket;
    NDDS_Transport_Port_t              _unisocket_port;
    RTI_INT32                         *_multisocket;
    int                                _multiSocketArrayLength;

    /* store system information about the running NICs */
    int                                _interfacesCount; 
    struct NDDS_Transport_IP_Interface_t *_interfaceArray;
    int                                _interfaceArraySize; 
    struct NDDS_Transport_IP_Interface_t * _loopbackInterface;
    
    /* Fake UDP interface for testing purposes */
    struct NDDS_Transport_IP_Interface_t _fakeInterface;
    RTIBool                                   _fakeInterfaceEnabled; 

    /* user installed function that will be used to prevent an
       instance from using the interface */
    struct NDDS_Transport_UDP_InterfaceListener* _interfaceListener;

    /* Listener used to notify upper layers when a interface has changed*/
    NDDS_Transport_Listener _networkListener;

    char _id[NDDS_TRANSPORT_UDP_UNBLOCK_MESSAGE_SIZE];

    struct NDDS_Transport_UDP_gatherSendBuffer* gatherSendBuffer;

    /*
     * A list of unicast receive resources created for the transport.
     * Currently used to send UDPv4_WAN Binding Pings. Must be protected by
     * the transport mutex.
     */
    struct REDAInlineList _unicastReceiveResourceList;
    /*
     * Used to detect if the list has been modified (for example, as a
     * consequence of an IP mobility event) while the Binding Ping Send Thread
     * was traversing it (as we take/release the mutex to reduce contention).
     */
    RTI_UINT64 _unicastReceiveResourceListEpoch;

    /* A list of multicast receive resources created for the transport.
       This will be used to add multicast sockets, destroy multicast sockets
       and join (or rejoin) multicast groups when the corresponding interfaces 
       are created, become available or unavailable, dissappear or change IP 
       address */
    struct REDAInlineList _multicastReceiveResourceList;

    /*
     * A list of unicast send resources created for the transport.
     * Currently used during IP mobility events to refresh the
     * is_local_destination SendResource flag. Must be protected by
     * the transport mutex.
     */
    struct REDAInlineList _unicastSendResourceList;

    /*
     * Used to detect if the list has been modified (for example, as a
     * consequence of an IP mobility event) while the Binding Ping Send Thread
     * was traversing it (as we take/release the mutex to reduce contention).
     */
    RTI_UINT64 _unicastSendResourceListEpoch;

    /* A list of multicast send resources created for the transport.
       This will be used to create priority send sockets when new interfaces are
       available or destroy sockets when the interface is gone or becomes 
       unavailable */
    struct REDAInlineList _multicastSendResourceList;
    /*
     * Mutex to guard the receive and send resource lists, the interface array,
     * and the WAN State changes. For an explanation of the concurrency model of
     * the UDP WAN mode, please refer to WAN State documentation.
     */
    struct RTIOsapiSemaphore * _mutex;
    /* TODO : Add HANDLE _callbackHandle for Windows Vista and above*/
    /* Public IP address of the transport instantiation */
    NDDS_Transport_Address_t _publicAddress;
    
    struct NDDS_Transport_UDP_Statistics _statistics;

    /* For internal use only. Keeps track of the min and max transport
       priorities that send resources are being created with */
    RTI_INT32 _min_priority;
    RTI_INT32 _max_priority;

    /* CORE-4052: Used for determining if ignore loopback interface */
    RTIBool _ignoreLoopbackInterface;

  #if defined(RTI_WIN32) || defined(RTI_WINCE)
    /* CORE-5954 -- Function pointer for the shutdown of the socket. */
    void * _cancelIoExFnc;
  #endif

    /* memory management */
    struct NDDS_Transport_IP_Interface_t * _interfaceArrayReplacement;
    int                                    _interfaceArrayReplacementSize;
    int                                     * _intArrayReplacement;
    int                                     _intArrayReplacementLength;

    struct NDDS_Transport_UDP_EventThread *_eventThread;

    struct NDDS_Transport_UDP_WAN_State *_wanState;
};


#define NDDS_TRANSPORT_UDP_SOCKET_INVALID               (-1)
#define NDDS_TRANSPORT_UDP_SOCKET_PLUGIN_UNISOCKET      (-2)

extern NDDS_Transport_DllExport
int NDDS_Transport_UDP_assert_fake_ip_address(
        NDDS_Transport_Plugin  *self,
        NDDS_Transport_Address_t *address);

extern NDDS_Transport_DllExport
int NDDS_Transport_UDP_remove_fake_ip_address(
        NDDS_Transport_Plugin  *self);


#define NDDS_TRANSPORT_UDP_WAN_UUID_INVALID {{0}}

#define NDDS_Transport_UDP_WAN_UUID_is_zero(__self) \
        (RTIOsapiMemory_compare( \
                (__self), \
                &NDDS_Transport_UDP_WAN_UUID_ZERO, \
                sizeof(NDDS_Transport_UDP_WAN_UUID)) == 0)

#define NDDS_Transport_UDP_WAN_UUID_compare(__uuidL, __uuidR) \
        RTIOsapiMemory_compare( \
                __uuidL, \
                __uuidR, \
                sizeof(NDDS_Transport_UDP_WAN_UUID))


#define NDDS_Transport_UDP_WAN_AddressFlag_set_flag( \
        __flags, \
        __enable, \
        __flag) \
        ((__flags) = (__enable) \
                ? ((__flags) | (__flag)) \
                : ((__flags) & ~(__flag)))

#define NDDS_Transport_UDP_WAN_AddressFlag_set_u_flag(__flags, __enable) \
        NDDS_Transport_UDP_WAN_AddressFlag_set_flag( \
                __flags, \
                __enable, \
                NDDS_TRANSPORT_UDP_WAN_ADDRESS_FLAG_U)

#define NDDS_Transport_UDP_WAN_AddressFlag_set_p_flag(__flags, __enable) \
        NDDS_Transport_UDP_WAN_AddressFlag_set_flag( \
                __flags, \
                __enable, \
                NDDS_TRANSPORT_UDP_WAN_ADDRESS_FLAG_P)

#define NDDS_Transport_UDP_WAN_AddressFlag_set_b_flag(__flags, __enable) \
        NDDS_Transport_UDP_WAN_AddressFlag_set_flag( \
                __flags, \
                __enable, \
                NDDS_TRANSPORT_UDP_WAN_ADDRESS_FLAG_B)

#define NDDS_Transport_UDP_WAN_AddressFlag_set_r_flag(__flags, __enable) \
        NDDS_Transport_UDP_WAN_AddressFlag_set_flag( \
                __flags, \
                __enable, \
                NDDS_TRANSPORT_UDP_WAN_ADDRESS_FLAG_R)


#define NDDS_Transport_UDP_WAN_AddressFlag_is_u_flag_enabled(__flags) \
        ((__flags) & NDDS_TRANSPORT_UDP_WAN_ADDRESS_FLAG_U)

#define NDDS_Transport_UDP_WAN_AddressFlag_is_p_flag_enabled(__flags) \
        ((__flags) & NDDS_TRANSPORT_UDP_WAN_ADDRESS_FLAG_P)

#define NDDS_Transport_UDP_WAN_AddressFlag_is_b_flag_enabled(__flags) \
        ((__flags) & NDDS_TRANSPORT_UDP_WAN_ADDRESS_FLAG_B)

#define NDDS_Transport_UDP_WAN_AddressFlag_is_r_flag_enabled(__flags) \
        ((__flags) & NDDS_TRANSPORT_UDP_WAN_ADDRESS_FLAG_R)


/* Flags */
#define NDDS_Transport_UDPv4_WAN_Address_is_uuid(__self) \
        NDDS_Transport_UDP_WAN_AddressFlag_is_u_flag_enabled((__self)->_flags)
#define NDDS_Transport_UDPv4_WAN_Address_is_public(__self) \
        NDDS_Transport_UDP_WAN_AddressFlag_is_p_flag_enabled((__self)->_flags)
#define NDDS_Transport_UDPv4_WAN_Address_is_bidirectional(__self) \
        NDDS_Transport_UDP_WAN_AddressFlag_is_b_flag_enabled((__self)->_flags)
#define NDDS_Transport_UDPv4_WAN_Address_is_relay(__self) \
        NDDS_Transport_UDP_WAN_AddressFlag_is_r_flag_enabled((__self)->_flags)

#define NDDS_Transport_UDPv4_WAN_Address_get_flags(__self) \
        (__self)->_flags
#define NDDS_Transport_UDPv4_WAN_Address_set_flags(__self, __flags) \
        ((__self)->_flags = (__flags))

/* Uuid */
#define NDDS_Transport_UDPv4_WAN_Address_get_uuid(__self) \
        &(__self)->_uuid
#define NDDS_Transport_UDPv4_WAN_Address_set_uuid(__self, __uuid) \
        (__self)->_uuid = *(__uuid)


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* transport_udp_impl_h */
