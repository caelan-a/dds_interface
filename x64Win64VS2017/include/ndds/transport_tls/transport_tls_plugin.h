/* (c) Copyright 2003-2021, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)transport_tls_plugin.h    generated by: makeheader    Fri Apr 23 02:31:07 2021
 *
 *		built from:	plugin.ifc
 */

#ifndef transport_tls_plugin_h
#define transport_tls_plugin_h


  #ifndef transport_tls_dll_h
    #include "transport_tls/transport_tls_dll.h"
  #endif
  #ifndef transport_interface_h
    #include "transport/transport_interface.h"
  #endif
  #ifndef transport_udpv4_h
    #include "transport/transport_udpv4.h"
  #endif

  #ifndef transport_tls_openssl_h
    #include "transport_tls/transport_tls_openssl.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif

struct RTIClock;

struct NDDS_Transport_DTLS; /* forward declare */

struct NDDS_Transport_DTLS_Property_t {

    /*e \brief basic transport property

      \default Refer to NDDS_Transport_DTLS_Plugin#NDDS_TRANSPORT_DTLS_PROPERTY_DEFAULT
     */
    struct NDDS_Transport_Property_t parent;


    /****** These map directly to UDPv4 properties: ******/
    
    /*e \brief Size in bytes of the send buffer of a socket used for sending.
     *
     * See NDDS_Transport_UDPv4_Property_t#send_socket_buffer_size for more details
     *
     * \default NDDS_Transport_DTLS_Plugin#NDDS_TRANSPORT_DTLS_MESSAGE_SIZE_MAX_DEFAULT
     */
    RTI_INT32 send_socket_buffer_size;

    /*e \brief Size in bytes of the receive buffer of a socket used for sending.
     *
     * See NDDS_Transport_UDPv4_Property_t#recv_socket_buffer_size for more details
     *
     * \default NDDS_Transport_DTLS_Plugin#NDDS_TRANSPORT_DTLS_MESSAGE_SIZE_MAX_DEFAULT
     */
    RTI_INT32 recv_socket_buffer_size;

    /*e \brief Prevent the Transport Plugin from using the IP loopback interface.
     *
     * See NDDS_Transport_UDPv4_Property_t#ignore_loopback_interface for more details
     *
     * \default -1 i.e. Automatic \ndds policy
     */
    RTI_INT32 ignore_loopback_interface;

    /*e \brief \deprecated Prevent the Transport Plugin from using a network
         	 interface that is not reported as RUNNING by the
		 operating system.
     *
     * See NDDS_Transport_UDPv4_Property_t#ignore_nonrunning_interfaces for more details
     *
     * \default 0
     */
    RTI_INT32 ignore_nonrunning_interfaces;

    /*e \brief Set mask for use of transport priority field.
     *
     * See NDDS_Transport_UDPv4_Property_t#transport_priority_mask for more details
     *
     * \default 0
     */
    RTI_UINT32 transport_priority_mask;

    /*e \brief Set low value of output range to IPv4 TOS.
     *
     * See NDDS_Transport_UDPv4_Property_t#transport_priority_mapping_low for more details
     *
     * \default 0
     */
    RTI_INT32 transport_priority_mapping_low;

    /*e \brief Set high value of output range to IPv4 TOS.
     *
     * See NDDS_Transport_UDPv4_Property_t#transport_priority_mapping_high for more details
     *
     * \default 0xff
     */
    RTI_INT32 transport_priority_mapping_high;

    /* These are new */

    /*e \brief Size of buffer for decoding packets from wire
     *
     * An extra buffer is required for storage of encrypted data
     *
     * \default NDDS_Transport_DTLS_Plugin#NDDS_TRANSPORT_DTLS_MESSAGE_SIZE_MAX_DEFAULT
     */
    RTI_INT32 recv_decode_buffer_size;

    /*e \brief Port offset to allow coexistence with non-secure UDP transport
     *
     * \default 144
     */
    RTI_INT32 port_offset;

    /*e \brief Forces the interface tracker to use a polling mechanism to detect
     * changes on the interfaces
     *
     * See NDDS_Transport_UDPv4_Property_t#force_interface_poll_detection for more details.
     *
     * \default 0 (disabled).
     */
    RTI_INT32 force_interface_poll_detection;
    
    /*e \brief Period for polling interface changes in milliseconds
     *
     * See NDDS_Transport_UDPv4_Property_t#interface_poll_period for more details.
     * 
     * \default 500
     */
    RTI_UINT32 interface_poll_period;
    
    /*e \brief Disable interface tracking
     * 
     * See NDDS_Transport_UDPv4_Property_t#disable_interface_tracking for more details.
     *
     * \default 0
     */
    RTI_INT32 disable_interface_tracking;

    /*e \brief [Windows only] Defines how much time (milliseconds) to wait
       to join a multicast group address when a new interface is detected.
     *
     * See NDDS_Transport_UDPv4_Property_t#join_multicast_group_timeout for more details.
     *
     * \default 5000
     */
    RTI_UINT32 join_multicast_group_timeout;


    /*e \brief DTLS handshake retransmission interval in milliseconds
     *
     * \default 1000 (1 sec)
     */
    RTI_UINT32 dtls_handshake_resend_interval;

    /*i \brief DTLS handshake retransmission count
     *
     * \default 7
     */
    RTI_UINT32 dtls_handshake_number_of_resends;

    /*e \brief Liveliness interval (multiple of resend interval)
     *
     * The connection will be dropped if no message from the peer is received in
     * this amount of time.  This enables cleaning up state for peers that are
     * no longer responding.  A secure keep-alive message will be sent every
     * half-interval if no other sends have occurred for a given DTLS connection
     * during that time.
     *
     * \default 60
     */
    RTI_UINT32 dtls_connection_liveliness_interval;

    /*i \brief MTU size to assume for wire (-1 = detect; 0 = ignore)
     *
     * \default 0
     */
    RTI_UINT32 transport_mtu;

    /*e \brief OpenSSL TLS parameters
     *
     * \default NDDS_Transport_TLS_Plugin#NDDS_TRANSPORT_TLS_OPENSSL_CONFIGURATION_DEFAULT
     */
    struct NDDS_Transport_TLS_OpenSSL_Configuration tls;
};


#define NDDS_TRANSPORT_DTLS_CLASS_NAME		"dtls"


#define NDDS_TRANSPORT_DTLS_ADDRESS_BIT_COUNT  (32)


#define NDDS_TRANSPORT_DTLS_PROPERTIES_BITMAP_DEFAULT (0)


#define NDDS_TRANSPORT_DTLS_PROPERTY_DEFAULT { \
    { NDDS_TRANSPORT_CLASSID_DTLS, /* classid */ \
      NDDS_TRANSPORT_DTLS_ADDRESS_BIT_COUNT, /* address_bit_count */ \
      NDDS_TRANSPORT_DTLS_PROPERTIES_BITMAP_DEFAULT, /* properties_bitmap */ \
      NDDS_TRANSPORT_UDPV4_GATHER_SEND_BUFFER_COUNT_MAX_DEFAULT, /* gather_send_buffer_count_max */ \
      SSL3_RT_MAX_PLAIN_LENGTH, /* message_size_max */ \
      NULL, 0, /* allow_interfaces_list */ \
      NULL, 0, /* deny_interfaces_list */ \
      NULL, 0, /* allow_multicast_interfaces_list */ \
      NULL, 0, /* deny_multicast_interfaces_list */ \
      NDDS_TRANSPORT_UUID_UNKNOWN, /* transport_uuid */ \
      NULL, /* domain_participant_ptr */ \
      NULL, /* domain_participant_forwarder */ \
      NULL /* thread_name_prefix */ \
    }, /* parent (NDDS_Transport_Property_t) */ \
    NDDS_TRANSPORT_UDPV4_SEND_SOCKET_BUFFER_SIZE_DEFAULT, /* send_socket_buffer_size */ \
    NDDS_TRANSPORT_UDPV4_RECV_SOCKET_BUFFER_SIZE_DEFAULT, /* recv_socket_buffer_size */ \
    -1, /* ignore_loopback_interface (auto) */ \
    0, /* ignore_nonrunning_interfaces (do not ignore non-RUNNING) */ \
    0, /* transport_priority_mask */ \
    0, 0xff, /* transport_priority_mapping_low, transport_priority_mapping_high (no mapping to IP_TOS by default) */ \
    /* TLS-specific: */ \
    NDDS_TRANSPORT_UDPV4_MESSAGE_SIZE_MAX_DEFAULT, /* recv_decode_buffer_size (actually want MTU) */ \
    144, /* port_offset */ \
    0, /* force_interface_poll_detection */ \
    500, /* interface_poll_period */ \
    0, /* disable_interface_tracking */ \
    5000, /* join_multicast_group_timeout */ \
    1000, /* dtls_handshake_resend_interval (1 second) */ \
    7, /* dtls_handshake_number_of_resends (last resend at ~60s) */ \
    60, /* dtls_connection_liveliness_interval (60x resend interval) */ \
    0, /* transport_mtu (don't set MTU) */ \
    NDDS_TRANSPORT_TLS_OPENSSL_CONFIGURATION_DEFAULT /* tls */ }

extern NDDS_Transport_TLS_DllExport 
NDDS_Transport_Plugin *NDDS_Transport_DTLS_create(
    NDDS_Transport_Address_t* default_network_address_out,
    const struct DDS_PropertyQosPolicy *property_in);

extern NDDS_Transport_TLS_DllExport
int NDDS_Transport_TLS_property_from_DDS_property(
    struct NDDS_Transport_TLS_OpenSSL_Configuration *tls_property,
    const struct DDS_PropertyQosPolicy *property_in);

extern NDDS_Transport_TLS_DllExport
RTIBool NDDS_Transport_TLS_property_copy(
        struct NDDS_Transport_TLS_OpenSSL_Configuration *out_property,
        const struct NDDS_Transport_TLS_OpenSSL_Configuration *in_property);

extern NDDS_Transport_TLS_DllExport 
NDDS_Transport_Plugin *NDDS_Transport_DTLS_new(
    const struct NDDS_Transport_DTLS_Property_t *property_in);

extern NDDS_Transport_TLS_DllExport 
NDDS_Transport_Plugin *NDDS_Transport_DTLS_newI(
    const struct NDDS_Transport_DTLS_Property_t *property_in,
    struct NDDS_Transport_UDPv4                 *base_transport_in,
    struct RTIClock                             *clock_in);

extern NDDS_Transport_TLS_DllExport 
const char * NDDS_Transport_DTLS_get_class_name_cEA(
    NDDS_Transport_Plugin    *self);

extern NDDS_Transport_TLS_DllExport 
RTI_INT32 NDDS_Transport_DTLS_string_to_address_cEA(
    NDDS_Transport_Plugin    *self,
    NDDS_Transport_Address_t *address_out,
    const char               *address_in);

extern NDDS_Transport_TLS_DllExport 
RTI_INT32 NDDS_Transport_DTLS_get_receive_interfaces_cEA(
    NDDS_Transport_Plugin      *self,
    RTI_INT32                  *found_more_than_provided_for_out,
    RTI_INT32                  *interface_reported_count_out,
    NDDS_Transport_Interface_t  interface_array_inout[],
    RTI_INT32                   interface_array_size_in);


#define NDDS_TRANSPORT_DTLS_UNBLOCK_MESSAGE_SIZE \
    (4 + 4 + sizeof(NDDS_Transport_Plugin *))


#ifdef __cplusplus
    }	/* extern "C" */
#endif

  #include "transport_tls_plugin_impl.h"

#endif /* transport_tls_plugin_h */
