/* (c) Copyright 2003-2021, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)transport_tls_dtls.h    generated by: makeheader    Fri Apr 23 02:31:07 2021
 *
 *		built from:	dtls.ifc
 */

#ifndef transport_tls_dtls_h
#define transport_tls_dtls_h


  #ifndef transport_tls_dll_h
    #include "transport_tls/transport_tls_dll.h"
  #endif
  #ifndef transport_tls_openssl_h
    #include "transport_tls/transport_tls_openssl.h"
  #endif
  #ifndef transport_common_h
    #include "transport/transport_common.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif

struct NDDS_Transport_DTLS_Connection;

extern NDDS_Transport_TLS_DllExport struct NDDS_Transport_DTLS_Connection *
NDDS_Transport_DTLS_Connection_new(
    SSL_CTX *context, RTIBool isServer,
    const NDDS_Transport_Address_t *peer_address_in,
    NDDS_Transport_Port_t peer_port_in,
    NDDS_Transport_Port_t recv_port_in);

extern NDDS_Transport_TLS_DllExport void
NDDS_Transport_DTLS_Connection_delete(
    struct NDDS_Transport_DTLS_Connection *conn);

extern NDDS_Transport_TLS_DllExport RTIBool
NDDS_Transport_DTLS_Connection_set_send_socket(
    struct NDDS_Transport_DTLS_Connection *connection,
    int socket);

extern NDDS_Transport_TLS_DllExport RTIBool
NDDS_Transport_DTLS_Connection_try_connect(
    struct NDDS_Transport_DTLS_Connection *connection);

extern NDDS_Transport_TLS_DllExport RTIBool
NDDS_Transport_DTLS_Connection_is_connected(
    struct NDDS_Transport_DTLS_Connection *connection);

extern NDDS_Transport_TLS_DllExport RTIBool
NDDS_Transport_DTLS_Connection_is_handshaking(
    struct NDDS_Transport_DTLS_Connection *connection);

extern NDDS_Transport_TLS_DllExport int
NDDS_Transport_DTLS_Connection_send(
    struct NDDS_Transport_DTLS_Connection *connection,
    const void *buffer, size_t size);

extern NDDS_Transport_TLS_DllExport int
NDDS_Transport_DTLS_Connection_send_liveliness(
    struct NDDS_Transport_DTLS_Connection *connection);

extern NDDS_Transport_TLS_DllExport RTIBool
NDDS_Transport_DTLS_Connection_reset(
    struct NDDS_Transport_DTLS_Connection *connection);

extern NDDS_Transport_TLS_DllExport RTIBool
NDDS_Transport_DTLS_Connection_shutdown(
    struct NDDS_Transport_DTLS_Connection *connection);

extern NDDS_Transport_TLS_DllExport RTIBool
NDDS_Transport_DTLS_Connection_is_shutdown(
    struct NDDS_Transport_DTLS_Connection *connection);

extern NDDS_Transport_TLS_DllExport int
NDDS_Transport_DTLS_Connection_process_receive(
    struct NDDS_Transport_DTLS_Connection *connection,
    BIO *receive_bio, /* input buffer */
    void *buffer, size_t size); /* output buffer, return actual size */

struct NDDS_Transport_DTLS_Connection_Mapper;

struct NDDS_Transport_DTLS_Receiver; /* for receive port resources */


struct NDDS_Transport_DTLS_Connection_Key {
    NDDS_Transport_Address_t peer_address;
    NDDS_Transport_Port_t peer_port;
    NDDS_Transport_Port_t recv_port; /* or receiver? */
};

extern NDDS_Transport_TLS_DllExport struct NDDS_Transport_DTLS_Connection_Mapper *
NDDS_Transport_DTLS_Connection_Mapper_new(
        SSL_CTX *context,
        int retransmitIntervalMs,
        int handshakeRestartPeriod, /* in terms of re-xmit interval */
        int livelinessPeriod, /* in terms of re-xmit interval */
        const char *threadNamePrefix);

extern NDDS_Transport_TLS_DllExport void
NDDS_Transport_DTLS_Connection_Mapper_delete(
    struct NDDS_Transport_DTLS_Connection_Mapper *mapper);

extern NDDS_Transport_TLS_DllExport struct NDDS_Transport_DTLS_Connection *
NDDS_Transport_DTLS_Connection_Mapper_assert_connection(
    struct NDDS_Transport_DTLS_Connection_Mapper *mapper,
    RTIBool own_mutex, /* TRUE if we already hold mutex */
    struct NDDS_Transport_DTLS_Receiver *receiver, /* can = NULL */
    RTIBool acquire_ref, /* deprecated for now */
    const NDDS_Transport_Address_t *peer_address_in,
    NDDS_Transport_Port_t peer_port_in);

extern NDDS_Transport_TLS_DllExport void
NDDS_Transport_DTLS_Connection_Mapper_free_connection_by_key(
    struct NDDS_Transport_DTLS_Connection_Mapper *mapper,
    struct NDDS_Transport_DTLS_Connection_Key *key);

extern NDDS_Transport_TLS_DllExport void
NDDS_Transport_DTLS_Connection_Mapper_free_connection(
    struct NDDS_Transport_DTLS_Connection_Mapper *mapper,
    struct NDDS_Transport_DTLS_Connection *connection);

extern NDDS_Transport_TLS_DllExport void
NDDS_Transport_DTLS_Connection_Mapper_poll_events(
    struct NDDS_Transport_DTLS_Connection_Mapper *mapper);

struct NDDS_Transport_DTLS_Receiver;

extern  NDDS_Transport_TLS_DllVariable struct NDDS_Transport_DTLS_Connection_Key
    NDDS_Transport_DTLS_Connection_Key_Force_Server,
    NDDS_Transport_DTLS_Connection_Key_Force_Client;


#define NDDS_TRANSPORT_DTLS_RECEIVER_FORCE_SERVER_ADDRESS \
    (&NDDS_Transport_DTLS_Connection_Key_Force_Server.peer_address)
#define NDDS_TRANSPORT_DTLS_RECEIVER_FORCE_SERVER_PORT \
    (NDDS_Transport_DTLS_Connection_Key_Force_Server.peer_port)
#define NDDS_TRANSPORT_DTLS_RECEIVER_FORCE_CLIENT_ADDRESS \
    (&NDDS_Transport_DTLS_Connection_Key_Force_Client.peer_address)
#define NDDS_TRANSPORT_DTLS_RECEIVER_FORCE_CLIENT_PORT \
    (NDDS_Transport_DTLS_Connection_Key_Force_Client.peer_port)

extern NDDS_Transport_TLS_DllExport struct NDDS_Transport_DTLS_Receiver *
NDDS_Transport_DTLS_Connection_Mapper_create_receiver(
    struct NDDS_Transport_DTLS_Connection_Mapper *mapper,
    NDDS_Transport_Address_t *recv_address_in,
    NDDS_Transport_Port_t recv_port_in,
    int send_sock_in, int recv_buf_len_in);

extern NDDS_Transport_TLS_DllExport NDDS_Transport_Port_t
NDDS_Transport_DTLS_Receiver_get_receive_port(
    struct NDDS_Transport_DTLS_Receiver *receiver);

extern NDDS_Transport_TLS_DllExport void *
NDDS_Transport_DTLS_Receiver_get_receive_buffer(
    struct NDDS_Transport_DTLS_Receiver *receiver,
    RTI_INT32 *max_length_out);

extern NDDS_Transport_TLS_DllExport int
NDDS_Transport_DTLS_Receiver_process_receive(
    struct NDDS_Transport_DTLS_Receiver *receiver,
    NDDS_Transport_Address_t *peer_address_in,
    NDDS_Transport_Port_t peer_port_in,
    int dgram_length_in,
    char *buffer_out, size_t buf_size);

extern NDDS_Transport_TLS_DllExport /* TODO: merge above into this */
int NDDS_Transport_DTLS_Receiver_process_receive_new(
    struct NDDS_Transport_DTLS_Receiver *receiver,
    NDDS_Transport_Address_t *source_address_in,
    NDDS_Transport_Port_t source_port_in,
    const NDDS_Transport_Buffer_t *input_buffer, /* data from wire */
    NDDS_Transport_Buffer_t *output_buffer); /* any data decrypted from TLS */

extern NDDS_Transport_TLS_DllExport RTIBool
NDDS_Transport_DTLS_Receiver_is_server_port(
    const struct NDDS_Transport_DTLS_Receiver *receiver,
    const NDDS_Transport_Address_t *peer_address_in,
    NDDS_Transport_Port_t peer_port_in);

extern NDDS_Transport_TLS_DllExport void
NDDS_Transport_DTLS_Connection_Mapper_delete_receiver(
    struct NDDS_Transport_DTLS_Connection_Mapper *mapper,
    struct Public NDDS_Transport_DTLS_Receiver *);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* transport_tls_dtls_h */
