/* (c) Copyright 2003-2021, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)transport_wan_plugin_impl.h    generated by: makeheader    Fri Apr 23 02:31:37 2021
 *
 *		built from:	plugin_impl.ifc
 */

#ifndef transport_wan_plugin_impl_h
#define transport_wan_plugin_impl_h



#include "osapi/osapi_socket.h"
#include "osapi/osapi_thread.h"

#ifdef __cplusplus
    extern "C" {
#endif


struct NDDS_Transport_WAN_StunContext;


struct NDDS_Transport_WAN_EventThread;


struct NDDS_Transport_WAN_ReceiveThread;


struct NDDS_Transport_DTLS_WAN_GatherSendBuffer;


struct NDDS_Transport_DTLS_Connection_Mapper;


struct NDDS_Transport_DTLS_Receiver;


struct NDDS_Transport_WAN_ReceiveContext {
    struct NDDS_Transport_WAN_StunContext * stun_context;
    struct NDDS_Transport_DTLS_Receiver * dtls_receiver;
};


struct NDDS_Transport_WAN_SocketFactory {
    struct NDDS_Transport_UDPv4_SocketFactory _udp_socket_factory;

    /*i*/
    RTI_UINT32 _bind_interface_address;
};


struct NDDS_Transport_WAN {
    NDDS_Transport_Plugin  parent;

    /*i @brief Base transport (UDPv4) */
    struct NDDS_Transport_UDPv4 * _base_transport;

    /*i @brief Transport property */
    struct NDDS_Transport_WAN_Property_t _property;

    /*i @brief Represents the address network_id + 0.0.0.0 */
    NDDS_Transport_Address_t _any_address;
    char _any_address_str[NDDS_TRANSPORT_ADDRESS_STRING_BUFFER_SIZE];

    /*i @brief Server address */
    NDDS_Transport_Address_t _server_address;

    /*i @brief STUN context */
    struct NDDS_Transport_WAN_StunContext * _stun_context;

    /*i @brief Gather send buffer for TLS encode */
    struct NDDS_Transport_DTLS_WAN_GatherSendBuffer* _gather_send_buffer;

    /*i @brief DTLS connection mapper */
    struct NDDS_Transport_DTLS_Connection_Mapper* _dtls_connection_mapper;

    /*i @brief Event thread used to send STUN messages */
    /* There is only one event thread per transport */
    struct NDDS_Transport_WAN_EventThread * _event_thread;

    /*i @brief Receive thread associated to the default send unicast socket */
    struct NDDS_Transport_WAN_ReceiveThread * _receive_thread;

    /*i @brief receive context for default send unicast socket */
    struct NDDS_Transport_WAN_ReceiveContext _receive_context;

    /*i*/
    RTIBool _registered;

    /*i*/
    struct NDDS_Transport_WAN_SocketFactory _socket_factory;
};


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* transport_wan_plugin_impl_h */
