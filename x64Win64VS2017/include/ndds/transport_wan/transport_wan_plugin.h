/* (c) Copyright 2003-2021, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)transport_wan_plugin.h    generated by: makeheader    Fri Apr 23 02:31:37 2021
 *
 *		built from:	plugin.ifc
 */

#ifndef transport_wan_plugin_h
#define transport_wan_plugin_h


  #ifndef transport_wan_dll_h
    #include "transport_wan/transport_wan_dll.h"
  #endif
  #ifndef transport_interface_h
    #include "transport/transport_interface.h"
  #endif
  #ifndef transport_udpv4_h
    #include "transport/transport_udpv4.h"
  #endif
  #ifndef transport_tls_openssl_h
    #include "transport_tls/transport_tls_openssl.h"
  #endif

  #ifndef dds_c_infrastructure_h
    #include "dds_c/dds_c_infrastructure.h"
  #endif

  #ifndef osapi_ntptime_h
    #include "osapi/osapi_ntptime.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif

struct RTIClock;

struct NDDS_Transport_WAN; /* forward declare */


#define NDDS_TRANSPORT_WAN_TRANSPORT_INSTANCE_ID_LENGTH 12

struct NDDS_Transport_WAN_Property_t {
    /*e \brief UDPv4 transport plugin property

      \default Refer to NDDS_Transport_WAN_Plugin#NDDS_TRANSPORT_WAN_PROPERTY_DEFAULT
     */
    struct NDDS_Transport_UDPv4_Property_t parent;

    /*e \brief Set to 1 to enable secure transport using DTLS

        If enabled, there must be valid OpenSSL properties in NDDS_Transport_WAN_Property_t#tls

        \default 0 (off)
     */
    RTI_INT32 enable_security;

    /*e \brief Size of buffer for decoding packets from wire when security-enabled

        An extra buffer is required for storage of encrypted data

        \default NDDS_Transport_WAN_Plugin#NDDS_TRANSPORT_WAN_DTLS_FRAGMENT_SIZE_MAX_DEFAULT
    */
    RTI_INT32 recv_decode_buffer_size;

    /*e \brief Port offset to allow coexistence with non-WAN UDP transport

        \default 144
     */
    RTI_INT32 port_offset;

    /*e \brief DTLS handshake retransmission interval in milliseconds

        \default 1000 (1 sec)
    */
    RTI_UINT32 dtls_handshake_resend_interval;

    /*i \brief DTLS handshake retransmission count

        \default 7
    */
    RTI_UINT32 dtls_handshake_number_of_resends;

    /*e \brief Liveliness interval (multiple of resend interval)
     *
     * The connection will be dropped if no message from the peer is received in
     * this amount of time.  This enables cleaning up state for peers that are
     * no longer responding.  A secure keep-alive message will be sent every
     * half-interval if no other sends have occurred for a given DTLS connection
     * during that time.
     *
     * \default 60
     */
    RTI_UINT32 dtls_connection_liveliness_interval;

    /*i \brief MTU size to assume for wire (-1 = detect; 0 = ignore)

        \default 0
     */
    RTI_UINT32 transport_mtu;

    /*e \brief OpenSSL TLS parameters

        \default NDDS_Transport_TLS_Plugin#NDDS_TRANSPORT_TLS_OPENSSL_CONFIGURATION_DEFAULT
     */
    struct NDDS_Transport_TLS_OpenSSL_Configuration tls;

    /*i The locators for this transport will be built as follows:
       TODO: transport_instance_id + network_ordered_ipv4_address */

    /*e @brief The WAN ID

      This value must be unique for all transport instances communicating with
      the same WAN Rendezvous Server.

      \default {0,0,0,0,0,0,0,0,0,0,0,0}

      \range {0,0,0,0,0,0,0,0,0,0,0,0} to
             {0xfe,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}
     */
    unsigned char transport_instance_id[ NDDS_TRANSPORT_WAN_TRANSPORT_INSTANCE_ID_LENGTH ];

    /*e
      @brief Interface IP address for the transport sockets

      The WAN transport can be configured to bind all sockets to a specified interface.  This
      is required for consistent WAN communication on multi-homed systems.

      If the value is NULL, the sockets will be bound to the special IP 
      address INADDR_ANY. This address allows the sockets to receive
      packets destined to any of the interfaces.

      \default NULL
    */
    char * interface_address;

    /*e
      @brief WAN Rendezvous Server address

      \default NULL
    */
    char * server;

    /*e
      @brief WAN Rendezvous Server port

      \default 3478
    */
    NDDS_Transport_Port_t server_port;

    /*e
      @brief STUN Retransmission interval in millisecs

      STUN request messages requiring a response are re-sent with this interval.
      The interval is doubled after each retransmission.

      \default 100
    */
    RTI_UINT32 stun_retransmission_interval;

    /*e
      @brief STUN Retransmission count

      STUN messages are resent up to this number of times until a response is
      received

      \default 7
    */
    RTI_UINT32 stun_number_of_retransmissions;

    /*e
      @brief STUN Liveliness period in millisecs

      This is the period at which messages are sent to peers to keep NAT holes open;
      and to the WAN server to refresh bound ports

      \default 15000
    */
    RTI_UINT32 stun_liveliness_period;
};


#define NDDS_TRANSPORT_WAN_CLASS_NAME "wan"


#define NDDS_TRANSPORT_WAN_ADDRESS_BIT_COUNT  (128)


#define NDDS_TRANSPORT_WAN_PROPERTIES_BITMAP_DEFAULT (0)


#define NDDS_TRANSPORT_WAN_PROPERTY_DEFAULT { \
    { \
      { NDDS_TRANSPORT_CLASSID_WAN, /* classid */ \
        NDDS_TRANSPORT_WAN_ADDRESS_BIT_COUNT, /* address_bit_count */ \
        NDDS_TRANSPORT_WAN_PROPERTIES_BITMAP_DEFAULT, /* properties_bitmap */ \
        NDDS_TRANSPORT_UDPV4_GATHER_SEND_BUFFER_COUNT_MAX_DEFAULT, /* gather_send_buffer_count_max */ \
        NDDS_TRANSPORT_UDPV4_MESSAGE_SIZE_MAX_DEFAULT, /* message_size_max */ \
        NULL, 0, /* allow_interfaces_list, allow_interfaces_list_length */ \
        NULL, 0, /* deny_interfaces_list deny_interfaces_list_length */ \
        NULL, 0, /* allow_multicast_interfaces_list, allow_multicast_interfaces_list_length */ \
        NULL, 0, /* deny_multicast_interfaces_list, deny_multicast_interfaces_list_length */ \
        NDDS_TRANSPORT_UUID_UNKNOWN, /* transport_uuid */ \
        NULL, /* domain_participant_ptr*/ \
        NULL, /* domain_participant_forwarder */ \
        NULL /* thread_name_prefix */ \
      }, /* parent (NDDS_Transport_Property_t) */ \
      NDDS_TRANSPORT_UDPV4_SEND_SOCKET_BUFFER_SIZE_DEFAULT, /* send_socket_buffer_size */ \
      NDDS_TRANSPORT_UDPV4_RECV_SOCKET_BUFFER_SIZE_DEFAULT, /* recv_socket_buffer_size */ \
      1, /* unicast_enabled (use unicast) */   \
      0, /* multicast_enabled (do NOT use multicast) */ \
      NDDS_TRANSPORT_UDPV4_MULTICAST_TTL_DEFAULT, /* multicast_ttl */ \
      0, /* multicast_loopback_disabled (enable) */ \
      -1, /* ignore_loopback_interface (auto) */ \
      1, /* ignore_nonup_interfaces */ \
      0, /* ignore_nonrunning_interfaces (do not ignore non-RUNNING) */ \
      0, /* no_zero_copy */ \
      NDDS_TRANSPORT_UDPV4_BLOCKING_DEFAULT, /* send_blocking */ \
      0, /* enable_v4mapped */ \
      NDDS_TRANSPORT_UDPV4_USE_CHECKSUM_ENABLED, /* use_checksum */ \
      0, /* transport_priority_mask (no mapping to IP_TOS by default) */ \
      0, /* transport_priority_mapping_low */ \
      0xff, /* transport_priority_mapping_high */ \
      1, /* send_ping */ \
      0, /* don't force polling interface tracker by default */ \
      500, /* 500 millisecs is the default polling period*/ \
      0, /* reuse multicast receive resource (disabled) */ \
      28, /* protocol_overhead_max (UDP(8)+IP(20)) */ \
      1, /* disable interface tracking (disabled) */\
      5000, /* join_multicast_group_timeout */ \
      NULL, /* public_address */ \
      NULL, 0, /* comm_ports_list */ \
      NULL, /* wan_listener */ \
      0, /* port_offset */ \
      0, /* binding_ping_period */ \
      NULL /* plugin_enabled_function_ptr */ \
    }, /* parent (NDDS_Transport_UDPv4_Property_t) */ \
    0, /* enable_security */ \
    NDDS_TRANSPORT_UDPV4_MESSAGE_SIZE_MAX_DEFAULT, /* recv_decode_buffer_size (actually want MTU) */ \
    144, /* port_offset */ \
    1000, /* dtls_handshake_resend_interval (1 second) */ \
    7, /* dtls_handshake_number_of_resends (last resend at ~60s) */ \
    60, /* dtls_connection_liveliness_interval (60x resend interval) */ \
    0, /* transport_mtu (don't set MTU) */ \
    NDDS_TRANSPORT_TLS_OPENSSL_CONFIGURATION_DEFAULT, /* tls */ \
    {0,0,0,0,0,0,0,0,0,0,0,0}, /* transport_instance_id (Network id) */ \
    NULL, /* interface_address (Interface address to bind) */ \
    NULL, 3478, /* server, server_port */ \
    100, /* stun_retransmission_interval */ \
    7, /* stun_number_of_retransmissions */ \
    15000 /* stun_liveliness_period */ \
}

extern NDDS_Transport_WAN_DllExport 
NDDS_Transport_Plugin *NDDS_Transport_WAN_create(
    NDDS_Transport_Address_t* default_network_address_out,
    const struct DDS_PropertyQosPolicy *property_in);

extern NDDS_Transport_WAN_DllExport 
NDDS_Transport_Plugin *NDDS_Transport_WAN_new(
    const struct NDDS_Transport_WAN_Property_t *property_in);

extern NDDS_Transport_WAN_DllExport 
const char * NDDS_Transport_WAN_get_class_name_cEA(
    NDDS_Transport_Plugin    *self);

extern NDDS_Transport_WAN_DllExport 
RTI_INT32 NDDS_Transport_WAN_string_to_address_cEA(
    NDDS_Transport_Plugin    *self,
    NDDS_Transport_Address_t *address_out,
    const char               *address_in);

extern NDDS_Transport_WAN_DllExport 
RTI_INT32 NDDS_Transport_WAN_get_receive_interfaces_cEA(
    NDDS_Transport_Plugin      *self,
    RTI_INT32                  *found_more_than_provided_for_out,
    RTI_INT32                  *interface_reported_count_out,
    NDDS_Transport_Interface_t  interface_array_inout[],
    RTI_INT32                   interface_array_size_in);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

  #include "transport_wan_plugin_impl.h"

#endif /* transport_wan_plugin_h */
