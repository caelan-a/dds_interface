/* (c) Copyright 2003-2021, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)osapi_activityContext.h    generated by: makeheader    Fri Apr 23 00:09:51 2021
 *
 *		built from:	activityContext.ifc
 */

#ifndef osapi_activityContext_h
#define osapi_activityContext_h


#ifndef osapi_context_h
  #include "osapi/osapi_context.h"
#endif
#ifdef __cplusplus
    extern "C" {
#endif

typedef enum {
    RTI_OSAPI_ACTIVITY_CONTEXT_ENTRY_KIND_EMPTY,
    RTI_OSAPI_ACTIVITY_CONTEXT_ENTRY_KIND_RESOURCE,
    RTI_OSAPI_ACTIVITY_CONTEXT_ENTRY_KIND_RESOURCE_WITH_PARAMS,
    RTI_OSAPI_ACTIVITY_CONTEXT_ENTRY_KIND_RESOURCE_GUID_WITH_PARAMS,
    RTI_OSAPI_ACTIVITY_CONTEXT_ENTRY_KIND_ACTIVITY,
    RTI_OSAPI_ACTIVITY_CONTEXT_ENTRY_KIND_ACTIVITY_WITH_PARAMS,
} RTIOsapiActivityContextEntryKind;


typedef unsigned int RTIOsapiActivityContextAttributeKindMask;


#define RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_BIT_GUID_PREFIX       0x1

#define RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_BIT_TOPIC             0x2
#define RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_FORMAT_TOPIC          "T=%s"

#define RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_BIT_TYPE              0x4
#define RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_FORMAT_TYPE           "C=%s"

#define RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_BIT_ENTITY_KIND       0x8
#define RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_FORMAT_ENTITY_KIND    "E=%s"

#define RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_BIT_DOMAIN_ID         0x10
#define RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_FORMAT_DOMAIN_ID      "D=%d"

#define RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_BIT_ENTITY_NAME       0x20
#define RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_FORMAT_ENTITY_NAME    "N=%s"

/* Add all the possibles attributes to the resource of the Activity Context. */
#define RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_MASK_ALL \
        (RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_BIT_GUID_PREFIX \
        | RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_BIT_TOPIC \
        | RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_BIT_TYPE \
        | RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_BIT_ENTITY_KIND \
        | RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_BIT_DOMAIN_ID \
        | RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_BIT_ENTITY_NAME)

#define RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_MASK_DEFAULT \
        RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_MASK_ALL

/* Not add any attribute to the resource of the Activity Context. */
#define RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_MASK_NONE 0x0

extern RTIOsapiDllVariable
const RTIOsapiActivityContextAttributeKindMask
        RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_BIT_ARRAY[];

extern RTIOsapiDllVariable
const char *RTI_OSAPI_ACTIVITY_CONTEXT_ATTRIBUTE_FORMAT_ARRAY[];


struct RTIOsapiActivityContextStackEntry {
    /*
     * Entry kind is used for:
     *  - Applying the skip entries functionality.
     *  - Figuring out how to parse the params member of the structure.
     *  - Choosing how to parse the entries to get the output string.
     */
    RTIOsapiActivityContextEntryKind kind;
    /*
     * This field is used to support skipping duplicated entries.
     * In case an entry is skipped because it is duplicated:
     *      parentIndex represents the index of the entry which was redundant
     *      with the skipped one.
     * Else:
     *      parentIndex is 0.
     */
    RTI_INT32 parentIndex;
    /*
     * The format of the entry is used for:
     *  - Identify the number of params by counting the character '%' in the
     *    format.
     *  - Generating the output string.
     */
    const char *format;
    /*
     * If kind == RTI_OSAPI_ACTIVITY_CONTEXT_ENTRY_KIND_RESOURCE
     *      params will be a a char *
     * If kind == RTI_OSAPI_ACTIVITY_CONTEXT_ENTRY_KIND_RESOURCE_GUID_WITH_PARAMS
     *   || kind == RTI_OSAPI_ACTIVITY_CONTEXT_ENTRY_KIND_RESOURCE_WITH_PARAMS
     *   || kind == RTI_OSAPI_ACTIVITY_CONTEXT_ENTRY_KIND_ACTIVITY
     *   || kind == RTI_OSAPI_ACTIVITY_CONTEXT_ENTRY_KIND_ACTIVITY_WITH_PARAMS:
     *      params will be a list of void pointer (void **)
     *          It will contain integer or guid structure or strings.
     */
    void *params;
};

extern RTIOsapiDllExport
RTIBool RTIOsapiActivityContextSupport_assertContextTss(
        RTIBool addContextTssToGlobalList);

extern RTIOsapiDllExport
RTIBool RTIOsapiActivityContextSupport_assertContextTssWithParams(
        RTIBool addContextTssToGlobalList,
        RTI_UINT32 maxEntryCount);

extern RTIOsapiDllExport
RTI_UINT32 RTIOsapiActivityContext_getString(
        char *outBuffer,
        RTI_UINT32 outBufferSize);

extern RTIOsapiDllExport
void RTIOsapiActivityContextScope_beginWithEntries(RTI_UINT32 maxEntryCount);

extern RTIOsapiDllExport
void RTIOsapiActivityContextScope_beginWithEntriesAndParams(
        RTI_UINT32 maxEntryCount,
        RTI_UINT32 maxParamsCount);

extern RTIOsapiDllExport
void RTIOsapiActivityContextScope_enterActivity(
        const char *formatTemplate);

extern RTIOsapiDllExport
void RTIOsapiActivityContextScope_enterResource(
        const char *formatTemplate,
        const char *resource);

extern RTIOsapiDllExport
void RTIOsapiActivityContextScope_enterActivityWithParams(
        const char *formatTemplate,
        ...);

extern RTIOsapiDllExport
void RTIOsapiActivityContextScope_enterResourceWithParams(
        const char *formatTemplate,
        ...);

extern RTIOsapiDllExport
void RTIOsapiActivityContextScope_enterResourceGuidWithParams(
        const char *formatTemplate,
        ...);

extern RTIOsapiDllExport
void RTIOsapiActivityContextScope_leave(void);

extern RTIOsapiDllExport
void RTIOsapiActivityContextScope_end(void);

extern RTIOsapiDllExport
void RTIOsapiActivityContext_enter(
        struct RTIOsapiActivityContextStackEntry *entry);

extern RTIOsapiDllExport
void RTIOsapiActivityContext_enterPair(
        struct RTIOsapiContext *self,
        struct RTIOsapiActivityContextStackEntry *entry1,
        struct RTIOsapiActivityContextStackEntry *entry2);

extern RTIOsapiDllExport
void RTIOsapiActivityContext_enterGroup(RTI_UINT32 groupSize, ...);

extern RTIOsapiDllExport
void RTIOsapiActivityContext_leave(void);

extern RTIOsapiDllExport
void RTIOsapiActivityContext_leaveGroup(
        struct RTIOsapiContext *self,
        RTI_UINT32 groupSize);

extern RTIOsapiDllExport
RTI_UINT32 RTIOsapiActivityContext_getDepth(void);

extern RTIOsapiDllExport
void RTIOsapiActivityContext_setAttributeMask(
        RTIOsapiActivityContextAttributeKindMask mask);

extern RTIOsapiDllExport
RTIBool RTIOsapiActivityContext_getParamList(
        void **listParams,
        RTI_UINT32 *paramIndex,
        const RTI_UINT32 maxParamsCount,
        const char *format,
        ...);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#include "osapi/osapi_activityContext_impl.h"

#endif /* osapi_activityContext_h */
