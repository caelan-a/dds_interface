/* (c) Copyright 2003-2021, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)osapi_compression.h    generated by: makeheader    Fri Apr 23 00:09:52 2021
 *
 *		built from:	compression.ifc
 */

#ifndef osapi_compression_h
#define osapi_compression_h


  #include <stdio.h>

  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef osapi_dll_h
    #include "osapi/osapi_dll.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif

typedef enum {
    RTI_OSAPI_COMPRESSION_RETCODE_OK = 0,
    RTI_OSAPI_COMPRESSION_RETCODE_ERROR = -1,
    RTI_OSAPI_COMPRESSION_RETCODE_NOT_SUPPORTED = -2,
    RTI_OSAPI_COMPRESSION_RETCODE_BUFFER_SIZE_ERROR = -3
} RTIOsapiCompressionRetcode;

typedef enum {
    RTI_OSAPI_COMPRESSION_LEVEL_AUTO = -1,
    RTI_OSAPI_COMPRESSION_LEVEL_NO_COMPRESSION = 0,
    RTI_OSAPI_COMPRESSION_LEVEL_1 = 1,
    RTI_OSAPI_COMPRESSION_LEVEL_2 = 2,
    RTI_OSAPI_COMPRESSION_LEVEL_3 = 3,
    RTI_OSAPI_COMPRESSION_LEVEL_4 = 4,
    RTI_OSAPI_COMPRESSION_LEVEL_5 = 5,
    RTI_OSAPI_COMPRESSION_LEVEL_6 = 6,
    RTI_OSAPI_COMPRESSION_LEVEL_7 = 7,
    RTI_OSAPI_COMPRESSION_LEVEL_8 = 8,
    RTI_OSAPI_COMPRESSION_LEVEL_9 = 9,
    RTI_OSAPI_COMPRESSION_LEVEL_10 = 10,
} RTIOsapiCompressionLevel;


#define RTI_OSAPI_COMPRESSION_LEVEL_BEST_SPEED RTI_OSAPI_COMPRESSION_LEVEL_1
#define RTI_OSAPI_COMPRESSION_LEVEL_BEST_COMPRESSION \
    RTI_OSAPI_COMPRESSION_LEVEL_10

typedef enum {
    RTI_OSAPI_COMPRESSION_CLASS_ID_NONE = 0,
    RTI_OSAPI_COMPRESSION_CLASS_ID_ZLIB = 1,
    RTI_OSAPI_COMPRESSION_CLASS_ID_BZIP2 = 2,
    RTI_OSAPI_COMPRESSION_CLASS_ID_LZ4 = 3,
    RTI_OSAPI_COMPRESSION_CLASS_ID_AUTO = -1
} RTIOsapiCompressionPluginClassId;

struct RTIOsapiCompressionPlugin;

typedef struct RTIOsapiCompressionPlugin RTIOsapiCompressionPlugin;


typedef RTIOsapiCompressionRetcode (*RTIOsapiCompressionPlugin_compressFunction)(
        RTIOsapiCompressionPlugin *self,
        char *bufferOut,
        int *lengthInOut,
        const char *bufferIn,
        int lengthIn,
        RTIOsapiCompressionLevel compressionLevel);


typedef RTIOsapiCompressionRetcode (*RTIOsapiCompressionPlugin_uncompressFunction)(
        RTIOsapiCompressionPlugin *self,
        char *bufferOut,
        int *lengthInOut,
        const char *bufferIn,
        int lengthIn);


typedef RTIOsapiCompressionRetcode (*RTIOsapiCompressionPlugin_destroyFunction)(
        RTIOsapiCompressionPlugin *self);

typedef enum {
    RTI_OSAPI_COMPRESSION_FILE_STREAM_KIND = 0,
    RTI_OSAPI_COMPRESSION_BUFFER_STREAM_KIND = 1
} RTIOsapiCompressionStreamKind;


struct RTIOsapiCompressionStreamInfo {
    RTI_INT32 compressionChunkSize;
    RTIOsapiCompressionLevel compressionLevel;
};


struct RTIOsapiCompressionFileStreamInfo {
    struct RTIOsapiCompressionStreamInfo parent;
    FILE *f;
};


#define RTI_OSAPI_COMPRESSION_CHUNK_SIZE_DEFAULT 16384
#define RTIOsapiCompressionFileStreamInfo_INITIALIZER { \
    { \
        RTI_OSAPI_COMPRESSION_CHUNK_SIZE_DEFAULT, \
        RTI_OSAPI_COMPRESSION_LEVEL_BEST_COMPRESSION \
    }, \
    NULL \
}


#define RTIOsapiBuffer RTIBuffer


struct RTIOsapiCompressionBufferStreamInfo {
    struct RTIOsapiCompressionStreamInfo parent;
    struct RTIOsapiBuffer buffer;
};


#define RTIOsapiCompressionBufferStreamInfo_INITIALIZER { \
    { \
        RTI_OSAPI_COMPRESSION_CHUNK_SIZE_DEFAULT, \
        RTI_OSAPI_COMPRESSION_LEVEL_BEST_COMPRESSION \
    }, \
    { 0, NULL} \
}

typedef void *RTIOsapiCompressionStreamHandle;


typedef RTIOsapiCompressionRetcode (*RTIOsapiCompressionPlugin_initializeStreamFunction)(
        RTIOsapiCompressionPlugin *self,
        RTIOsapiCompressionStreamHandle *streamHandle,
        RTIOsapiCompressionStreamKind streamKind,
        void *streamInfo,
        RTIBool disableHeapTracking);


typedef RTIOsapiCompressionRetcode (
        *RTIOsapiCompressionPlugin_setStreamFunction)(
        RTIOsapiCompressionPlugin *self,
        RTIOsapiCompressionStreamHandle* streamHandle,
        void* streamInfo);


typedef RTIOsapiCompressionRetcode (*RTIOsapiCompressionPlugin_writeFormattedStringFunction)(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *compressedBytesSize,
        RTIOsapiCompressionStreamHandle streamHandle,
        const char *format,
        ...);


typedef RTIOsapiCompressionRetcode (*RTIOsapiCompressionPlugin_writeBytesFunction)(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *compressedBytesSize,
        RTIOsapiCompressionStreamHandle streamHandle,
        const char *buffer,
        RTI_INT32 length);


typedef RTIOsapiCompressionRetcode (*RTIOsapiCompressionPlugin_flushFunction)(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *totalCompressedBytesSize,
        RTIOsapiCompressionStreamHandle streamHandle);


typedef RTIOsapiCompressionRetcode (*RTIOsapiCompressionPlugin_finalizeStreamFunction)(
        RTIOsapiCompressionPlugin *self,
        RTIOsapiCompressionStreamHandle streamHandle);


typedef RTIOsapiCompressionRetcode (*RTIOsapiCompressionPlugin_getTotalBytesReadFunction)(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *bytesRead,
        RTIOsapiCompressionStreamHandle streamHandle);


typedef RTIOsapiCompressionRetcode (*RTIOsapiCompressionPlugin_getStreamMaxOverheadFunction)(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *overhead,
        RTI_UINT32 maxWriteSize,
        RTI_UINT32 numberOfWrites);


struct RTIOsapiCompressionPluginDesc {
    /*e
     * @brief Minimum overhead for a single compression using the compress
     * operation.
     */
    RTI_INT32 singleCompressionMinimumOverhead;
};

struct RTIOsapiCompressionPlugin {
    RTIOsapiCompressionPluginClassId classId;
    struct RTIOsapiCompressionPluginDesc desc;
    RTIOsapiCompressionPlugin_compressFunction compress;
    RTIOsapiCompressionPlugin_uncompressFunction uncompress;
    RTIOsapiCompressionPlugin_destroyFunction destroy;
    RTIOsapiCompressionPlugin_initializeStreamFunction initializeStream;
    RTIOsapiCompressionPlugin_writeFormattedStringFunction writeFormattedString;
    RTIOsapiCompressionPlugin_finalizeStreamFunction finalizeStream;
    RTIOsapiCompressionPlugin_writeBytesFunction writeBytes;
    RTIOsapiCompressionPlugin_flushFunction flushStream;
    RTIOsapiCompressionPlugin_setStreamFunction setStream;
    RTIOsapiCompressionPlugin_getTotalBytesReadFunction getTotalBytesRead;
    RTIOsapiCompressionPlugin_getStreamMaxOverheadFunction getStreamMaxOverhead;
};


extern	RTIBool RTIOsapiCompression_getCompressionPlugin(
        RTIOsapiCompressionPluginClassId pluginId,
        RTIOsapiCompressionPlugin **plugin);


extern	RTIOsapiCompressionPluginClassId
RTIOsapiCompression_getCompressionPluginIdFromEncapsulationOpts(
        unsigned short encapsulationOpts);

extern RTIOsapiDllVariable
const RTIOsapiCompressionPlugin RTI_OSAPI_COMPRESSION_PLUGIN_ZLIB;

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Zlib_compress(
        RTIOsapiCompressionPlugin *self,
        char *bufferOut,
        int *lengthInOut,
        const char *bufferIn,
        int lengthIn,
        RTIOsapiCompressionLevel compressionLevel);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Zlib_uncompress(
        RTIOsapiCompressionPlugin *self,
        char *bufferOut,
        int *lengthInOut,
        const char *bufferIn,
        int inLength);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Zlib_destroy(
        RTIOsapiCompressionPlugin *self);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Zlib_initializeStream(
        RTIOsapiCompressionPlugin *self,
        RTIOsapiCompressionStreamHandle *streamHandle,
        RTIOsapiCompressionStreamKind streamKind,
        void *streamInfo,
        RTIBool disableHeapTracking);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Zlib_setStream(
        RTIOsapiCompressionPlugin *self,
        RTIOsapiCompressionStreamHandle *streamHandle,
        void *streamInfo);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Zlib_writeFormattedString(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *compressedBytesSize,
        RTIOsapiCompressionStreamHandle streamHandle,
        const char *format,
        ...);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Zlib_writeBytes(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *compressedBytesSize,
        RTIOsapiCompressionStreamHandle streamHandle,
        const char *buffer,
        RTI_INT32 bufferLength);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Zlib_finalizeStream(
        RTIOsapiCompressionPlugin *self,
        RTIOsapiCompressionStreamHandle streamHandle);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Zlib_flushStream(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *totalCompressedBytesSize,
        RTIOsapiCompressionStreamHandle streamHandle);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Zlib_getTotalBytesRead(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *bytesRead,
        RTIOsapiCompressionStreamHandle streamHandle);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Zlib_getStreamMaxOverhead(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *overhead,
        RTI_UINT32 serializedSampleMaxSize,
        RTI_UINT32 nSample);

extern RTIOsapiDllVariable
const RTIOsapiCompressionPlugin RTI_OSAPI_COMPRESSION_PLUGIN_BZIP2;

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Bzip2_compress(
        RTIOsapiCompressionPlugin *self,
        char *bufferOut,
        int *lengthInOut,
        const char *bufferIn,
        int lengthIn,
        RTIOsapiCompressionLevel compressionLevel);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Bzip2_uncompress(
        RTIOsapiCompressionPlugin *self,
        char *bufferOut,
        int *lengthInOut,
        const char *bufferIn,
        int inLength);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Bzip2_destroy(
        RTIOsapiCompressionPlugin *self);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Bzip2_initializeStream(
        RTIOsapiCompressionPlugin *self,
        RTIOsapiCompressionStreamHandle *streamHandle,
        RTIOsapiCompressionStreamKind streamKind,
        void *streamInfo,
        RTIBool disableHeapTracking);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Bzip2_setStream(
        RTIOsapiCompressionPlugin *self,
        RTIOsapiCompressionStreamHandle *streamHandle,
        void *streamInfo);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Bzip2_writeFormattedString(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *compressedBytesSize,
        RTIOsapiCompressionStreamHandle streamHandle,
        const char *format,
        ...);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Bzip2_finalizeStream(
        RTIOsapiCompressionPlugin *self,
        RTIOsapiCompressionStreamHandle streamHandle);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Bzip2_writeBytes(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *compressedBytesSize,
        RTIOsapiCompressionStreamHandle streamHandle,
        const char *buffer,
        RTI_INT32 bufferLength);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Bzip2_flushStream(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *totalCompressedBytesSize,
        RTIOsapiCompressionStreamHandle streamHandle);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Bzip2_getTotalBytesRead(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *bytesRead,
        RTIOsapiCompressionStreamHandle streamHandle);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Bzip2_getStreamMaxOverhead(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *overhead,
        RTI_UINT32 serializedSampleMaxSize,
        RTI_UINT32 nSample);

extern RTIOsapiDllVariable
const RTIOsapiCompressionPlugin RTI_OSAPI_COMPRESSION_PLUGIN_LZ4;

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Lz4_compress(
        RTIOsapiCompressionPlugin *self,
        char *bufferOut,
        int *lengthInOut,
        const char *bufferIn,
        int lengthIn,
        RTIOsapiCompressionLevel compressionLevel);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Lz4_uncompress(
        RTIOsapiCompressionPlugin *self,
        char *bufferOut,
        int *lengthInOut,
        const char *bufferIn,
        int inLength);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Lz4_destroy(
        RTIOsapiCompressionPlugin *self);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Lz4_initializeStream(
        RTIOsapiCompressionPlugin *self,
        RTIOsapiCompressionStreamHandle *streamHandle,
        RTIOsapiCompressionStreamKind streamKind,
        void *streamInfo,
        RTIBool disableHeapTracking);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Lz4_setStream(
        RTIOsapiCompressionPlugin *self,
        RTIOsapiCompressionStreamHandle *streamHandle,
        void *streamInfo);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Lz4_writeFormattedString(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *compressedBytesSize,
        RTIOsapiCompressionStreamHandle streamHandle,
        const char *format,
        ...);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Lz4_finalizeStream(
        RTIOsapiCompressionPlugin *self,
        RTIOsapiCompressionStreamHandle streamHandle);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Lz4_writeBytes(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *compressedBytesSize,
        RTIOsapiCompressionStreamHandle streamHandle,
        const char *buffer,
        RTI_INT32 bufferLength);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Lz4_flushStream(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *totalCompressedBytesSize,
        RTIOsapiCompressionStreamHandle streamHandle);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Lz4_getTotalBytesRead(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *bytesRead,
        RTIOsapiCompressionStreamHandle streamHandle);

extern RTIOsapiDllExport
RTIOsapiCompressionRetcode RTIOsapi_Lz4_getStreamMaxOverhead(
        RTIOsapiCompressionPlugin *self,
        RTI_INT32 *overhead,
        RTI_UINT32 serializedSampleMaxSize,
        RTI_UINT32 nSample);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* osapi_compression_h */
