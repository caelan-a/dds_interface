/* (c) Copyright 2003-2021, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)osapi_thread.h    generated by: makeheader    Fri Apr 23 00:10:12 2021
 *
 *		built from:	thread.ifc
 */

#ifndef osapi_thread_h
#define osapi_thread_h


  #ifndef osapi_ntptime_h
    #include "osapi/osapi_ntptime.h"
  #endif
  #ifndef osapi_dll_h
    #include "osapi/osapi_dll.h"
  #endif
  #ifndef log_common_h
    #include "log/log_common.h"
  #endif
  #ifndef osapi_cpu_h
    #include "osapi/osapi_cpu.h"
  #endif
  
#ifdef __cplusplus
    extern "C" {
#endif

struct RTIOsapiThread;

struct RTIOsapiJoinableThread;



/*e \ingroup RTIOsapiThreadClass 
  Use only the default options the OS gives you. 
*/
#define RTI_OSAPI_THREAD_OPTION_DEFAULT     0x00
/*e \ingroup RTIOsapiThreadClass 
  Support floating point. 
*/
#define RTI_OSAPI_THREAD_OPTION_FLOATING_POINT      0x01
/*e \ingroup RTIOsapiThreadClass 
  This thread can do standard io. 
*/
#define RTI_OSAPI_THREAD_OPTION_STDIO               0x02
/*e \ingroup RTIOsapiThreadClass 
  This thread will run in real-time priority mode. 
*/
#define RTI_OSAPI_THREAD_OPTION_REALTIME_PRIORITY   0x08
/*e \ingroup RTIOsapiThreadClass 
  Insist on the specified priority and fail if OS doesn't like it. 
*/
#define RTI_OSAPI_THREAD_OPTION_PRIORITY_ENFORCE    0x10
/*e \ingroup RTIOsapiThreadClass 
  Set the flag to be able to asynchronously cancel thread. 
*/
#define RTI_OSAPI_THREAD_OPTION_CANCEL_ASYNCHRONOUS 0x20
/*e \ingroup RTIOsapiThreadClass 
  Indicates to create the thread with the OS default stack size. If not supported,
  will use the platform default.
*/
#define RTI_OSAPI_THREAD_STACK_SIZE_OS_DEFAULT (-1)  

#if defined(RTI_VXWORKS)

  typedef enum {
      RTI_OSAPI_THREAD_PRIORITY_HIGH         = 68,
      RTI_OSAPI_THREAD_PRIORITY_ABOVE_NORMAL = 71,
      RTI_OSAPI_THREAD_PRIORITY_NORMAL       = 100,
      RTI_OSAPI_THREAD_PRIORITY_BELOW_NORMAL = 110,
      RTI_OSAPI_THREAD_PRIORITY_LOW          = 120
  } RTIOsapiThreadPriority;

  #define RTI_OSAPI_THREAD_PRIORITY_DEFAULT RTI_OSAPI_THREAD_PRIORITY_NORMAL
  #define RTI_OSAPI_THREAD_STACK_SIZE_DEFAULT (30*1024)

#elif defined(RTI_PSOS)

  typedef enum {
      RTI_OSAPI_THREAD_PRIORITY_HIGH         = 150,
      RTI_OSAPI_THREAD_PRIORITY_ABOVE_NORMAL = 130,
      RTI_OSAPI_THREAD_PRIORITY_NORMAL       = 100,
      RTI_OSAPI_THREAD_PRIORITY_BELOW_NORMAL = 90,
      RTI_OSAPI_THREAD_PRIORITY_LOW          = 80
  } RTIOsapiThreadPriority;

  #define RTI_OSAPI_THREAD_PRIORITY_DEFAULT RTI_OSAPI_THREAD_PRIORITY_NORMAL
  #define RTI_OSAPI_THREAD_STACK_SIZE_DEFAULT (16*1024)

#elif defined(RTI_LYNX)

  typedef enum {
      RTI_OSAPI_THREAD_PRIORITY_HIGH         = 32,
      RTI_OSAPI_THREAD_PRIORITY_ABOVE_NORMAL = 29,
      RTI_OSAPI_THREAD_PRIORITY_NORMAL       = 17,
      RTI_OSAPI_THREAD_PRIORITY_BELOW_NORMAL = 13,
      RTI_OSAPI_THREAD_PRIORITY_LOW          = 10
  } RTIOsapiThreadPriority;

  #define RTI_OSAPI_THREAD_PRIORITY_DEFAULT RTI_OSAPI_THREAD_PRIORITY_NORMAL
  #define RTI_OSAPI_THREAD_STACK_SIZE_DEFAULT (64*1024)

#elif defined(RTI_NETOS)

  typedef enum {
      RTI_OSAPI_THREAD_PRIORITY_HIGH         = 6,
      RTI_OSAPI_THREAD_PRIORITY_ABOVE_NORMAL = 9,
      RTI_OSAPI_THREAD_PRIORITY_NORMAL       = 15,
      RTI_OSAPI_THREAD_PRIORITY_BELOW_NORMAL = 20,
      RTI_OSAPI_THREAD_PRIORITY_LOW          = 22
  } RTIOsapiThreadPriority;

  #define RTI_OSAPI_THREAD_PRIORITY_DEFAULT RTI_OSAPI_THREAD_PRIORITY_NORMAL
  #define RTI_OSAPI_THREAD_STACK_SIZE_DEFAULT (16*1024)

#elif defined(RTI_WIN32)

  typedef enum {
      RTI_OSAPI_THREAD_PRIORITY_HIGH         = 3,
      RTI_OSAPI_THREAD_PRIORITY_ABOVE_NORMAL = 2,
      RTI_OSAPI_THREAD_PRIORITY_NORMAL       = 0,
      RTI_OSAPI_THREAD_PRIORITY_BELOW_NORMAL = -2,
      RTI_OSAPI_THREAD_PRIORITY_LOW          = -3
  } RTIOsapiThreadPriority;

  #define RTI_OSAPI_THREAD_PRIORITY_DEFAULT RTI_OSAPI_THREAD_PRIORITY_NORMAL
  #define RTI_OSAPI_THREAD_STACK_SIZE_DEFAULT \
        (RTI_OSAPI_THREAD_STACK_SIZE_OS_DEFAULT)

#elif defined(RTI_INTIME)

  typedef enum {
      RTI_OSAPI_THREAD_PRIORITY_HIGH         = 3,
      RTI_OSAPI_THREAD_PRIORITY_ABOVE_NORMAL = 2,
      RTI_OSAPI_THREAD_PRIORITY_NORMAL       = 0,
      RTI_OSAPI_THREAD_PRIORITY_BELOW_NORMAL = -2,
      RTI_OSAPI_THREAD_PRIORITY_LOW          = -3
  } RTIOsapiThreadPriority;

  #define RTI_OSAPI_THREAD_PRIORITY_DEFAULT RTI_OSAPI_THREAD_PRIORITY_NORMAL
  #define RTI_OSAPI_THREAD_STACK_SIZE_DEFAULT (192*1024)

#elif defined(RTI_WINCE)

  typedef enum {
      RTI_OSAPI_THREAD_PRIORITY_HIGH         = 249,
      RTI_OSAPI_THREAD_PRIORITY_ABOVE_NORMAL = 250,
      RTI_OSAPI_THREAD_PRIORITY_NORMAL       = 251,
      RTI_OSAPI_THREAD_PRIORITY_BELOW_NORMAL = 252,
      RTI_OSAPI_THREAD_PRIORITY_LOW          = 253
  } RTIOsapiThreadPriority;

  #define RTI_OSAPI_THREAD_PRIORITY_DEFAULT RTI_OSAPI_THREAD_PRIORITY_NORMAL
  #define RTI_OSAPI_THREAD_STACK_SIZE_DEFAULT (0)

#elif defined(RTI_QNX)

  typedef enum {
      RTI_OSAPI_THREAD_PRIORITY_HIGH         = 14,
      RTI_OSAPI_THREAD_PRIORITY_ABOVE_NORMAL = 12,
      RTI_OSAPI_THREAD_PRIORITY_NORMAL       = 10,
      RTI_OSAPI_THREAD_PRIORITY_BELOW_NORMAL = 8,
      RTI_OSAPI_THREAD_PRIORITY_LOW          = 6
  } RTIOsapiThreadPriority;

  #define RTI_OSAPI_THREAD_PRIORITY_DEFAULT RTI_OSAPI_THREAD_PRIORITY_NORMAL
  #define RTI_OSAPI_THREAD_STACK_SIZE_DEFAULT (64*1024)

#elif defined(RTI_INTY)

  typedef enum {
      RTI_OSAPI_THREAD_PRIORITY_HIGH         = 120,
      RTI_OSAPI_THREAD_PRIORITY_ABOVE_NORMAL = 100,
      RTI_OSAPI_THREAD_PRIORITY_NORMAL       = 90,
      RTI_OSAPI_THREAD_PRIORITY_BELOW_NORMAL = 80,
      RTI_OSAPI_THREAD_PRIORITY_LOW          = 60
  } RTIOsapiThreadPriority;


  #define RTI_OSAPI_THREAD_PRIORITY_DEFAULT 16 
  #define RTI_OSAPI_THREAD_STACK_SIZE_DEFAULT (64*1024)

#elif defined(RTI_AIX)

  typedef enum {
      RTI_OSAPI_THREAD_PRIORITY_HIGH         = -9999999,
      RTI_OSAPI_THREAD_PRIORITY_ABOVE_NORMAL = -9999999,
      RTI_OSAPI_THREAD_PRIORITY_NORMAL       = -9999999,
      RTI_OSAPI_THREAD_PRIORITY_BELOW_NORMAL = -9999999,
      RTI_OSAPI_THREAD_PRIORITY_LOW          = -9999999
  } RTIOsapiThreadPriority;

  #define RTI_OSAPI_THREAD_PRIORITY_DEFAULT RTI_OSAPI_THREAD_PRIORITY_NORMAL

  /* The default stack size on 32 bit AIX is too small, the default for 64 bit
   * is 192KB, which is enough. Set the default high enough
   */
  #define RTI_OSAPI_THREAD_STACK_SIZE_DEFAULT (192*1024)
#else

  typedef enum {
      RTI_OSAPI_THREAD_PRIORITY_HIGH         = -9999999,
      RTI_OSAPI_THREAD_PRIORITY_ABOVE_NORMAL = -9999999,
      RTI_OSAPI_THREAD_PRIORITY_NORMAL       = -9999999,
      RTI_OSAPI_THREAD_PRIORITY_BELOW_NORMAL = -9999999,
      RTI_OSAPI_THREAD_PRIORITY_LOW          = -9999999
  } RTIOsapiThreadPriority;

  #define RTI_OSAPI_THREAD_PRIORITY_DEFAULT RTI_OSAPI_THREAD_PRIORITY_NORMAL
  #define RTI_OSAPI_THREAD_STACK_SIZE_DEFAULT \
        (RTI_OSAPI_THREAD_STACK_SIZE_OS_DEFAULT)
  
#endif/* setting of default thread property */
  

typedef void RTIOsapiThreadTssFactory;

extern RTIOsapiDllExport 
RTIOsapiThreadTssFactory * RTIOsapiThread_createTssFactory(void);

extern RTIOsapiDllExport 
void RTIOsapiThread_deleteTssFactory(RTIOsapiThreadTssFactory * factory);

extern RTIOsapiDllExport 
RTIBool RTIOsapiThread_createKey(RTI_UINT32 *key,
                                 RTIOsapiThreadTssFactory * tssFactory);

extern RTIOsapiDllExport RTIBool RTIOsapiThread_setTss(RTI_UINT32 key, 
						       const void *value);

extern RTIOsapiDllExport void *RTIOsapiThread_getTss(RTI_UINT32 key);

extern RTIOsapiDllExport 
RTIBool RTIOsapiThread_deleteKey(RTIOsapiThreadTssFactory * tssFactory,
                                 RTI_UINT32 key);

extern RTIOsapiDllExport RTIBool
RTIOsapiThread_sleep(const struct RTINtpTime* timeIn);

extern RTIOsapiDllExport void
RTIOsapiThread_spin(RTI_UINT64 spinCount);

extern RTIOsapiDllExport int
RTIOsapiThread_getPriority(struct RTIOsapiThread* me);

extern RTIOsapiDllExport void
RTIOsapiThread_logCpuAffinity(const char *threadName);

typedef void *(*RTIOsapiThreadOnSpawnedMethod)(void* threadParam);

extern RTIOsapiDllExport struct RTIOsapiThread*
RTIOsapiThread_newWithStack(
        const char *name, 
        int priority,
        int options, 
        void * stack,
        int stackSize, 
        struct RTIOsapiCpuBitmap *cpuBitmap,
        RTIOsapiThreadOnSpawnedMethod thread_rtn,
        void *threadParam);

extern RTIOsapiDllExport 
RTIBool RTIOsapiThread_initialize(
            struct RTIOsapiThread* me,
            const char *name, 
            int priority,
            int options, 
            int stackSize, 
            struct RTIOsapiCpuBitmap *cpuBitmap,
            RTIOsapiThreadOnSpawnedMethod thread_rtn,
            void *threadParam);

extern RTIOsapiDllExport void RTIOsapiThread_finalize(struct RTIOsapiThread* me);

extern RTIOsapiDllExport 
struct RTIOsapiThread* RTIOsapiThread_new(
        const char *name, 
        int priority,
        int options, 
        int stackSize, 
        struct RTIOsapiCpuBitmap *cpuBitmap,
        RTIOsapiThreadOnSpawnedMethod thread_rtn,
        void *threadParam);

extern RTIOsapiDllExport void RTIOsapiThread_delete(struct RTIOsapiThread* me);

extern RTIOsapiDllExport void
RTIOsapiThread_terminateThread(struct RTIOsapiThread* me);

extern RTIOsapiDllExport struct RTIOsapiThread*
RTIOsapiThread_getCurrentThread(void);

extern RTIOsapiDllExport RTI_UINT64
RTIOsapiThread_getCurrentThreadID(void);

extern RTIOsapiDllExport RTIBool
RTIOsapiThread_getNativePriorityFromNormal(int *nativePriority,
    int normalPriority, int normalMin, int normalMax, int options);

extern RTIOsapiDllExport RTIBool
RTIOsapiThread_getNormalPriorityFromNative(
    int *normalPriority,
    int nativePriority, int normalMin, int normalMax, int options);

extern RTIOsapiDllExport
RTIBool RTIOsapiThread_isManagedStackSupported(void);

extern RTIOsapiDllExport
RTIBool RTIOsapiJoinableThread_loop(
    struct RTIOsapiJoinableThread * self,
    struct RTINtpTime * sleepTime);


#define RTI_OSAPI_THREAD_DEFAULT_BLOCKING_TIMEOUT 20000


#define RTI_OSAPI_THREAD_INFINITE_BLOCKING_TIMEOUT RTI_UINT32_MAX

extern RTIOsapiDllExport
RTIBool RTIOsapiJoinableThread_stopAndDelete(
        struct RTIOsapiJoinableThread *self,
        RTI_UINT32 timeoutMillisec);

extern RTIOsapiDllExport
struct RTIOsapiJoinableThread * RTIOsapiJoinableThread_new(
        const char *name, 
        int priority,
        int options, 
        int stackSize, 
        struct RTIOsapiCpuBitmap *cpuBitmap,
        RTIOsapiThreadOnSpawnedMethod thread_rtn,
        void *threadParam);

extern RTIOsapiDllExport
int RTIOsapiJoinableThread_getPriority(struct RTIOsapiJoinableThread *me);

extern RTIOsapiDllExport
const char * RTIOsapiThread_getName(void);


#if (defined(RTI_LINUX) \
        && defined(__GLIBC__) && ((__GLIBC__ > 2) || (__GLIBC__ == 2 && (__GLIBC_MINOR__ >= 12)))) \
    || (defined(RTI_DARWIN) \
        && defined(__MAC_OS_X_VERSION_MAX_ALLOWED) && (__MAC_OS_X_VERSION_MAX_ALLOWED >= __MAC_10_6)) \
    || defined(RTI_QNX) \
    || defined(RTI_WIN32) \
    || (defined(RTI_IOS) && (__IPHONE_OS_VERSION_MAX_ALLOWED >= 30200))
  #define RTI_OSAPI_SET_THREAD_NAME_SUPPORTED 1
#else
  #define RTI_OSAPI_SET_THREAD_NAME_SUPPORTED 0
#endif

/*
 * For all the platforms:
 * We limit the thread name length to 16 characters,
 * including the null byte ('\0').
 * This limit comes from Linux, that is the more restrictive architecture.
 * We use the same limit in all the platforms for consistency.
 */
#define RTI_OSAPI_THREAD_NAME_MAX_SIZE 16
/*
 * Thread name prefix represents the concatenation of:
 *      'r' + Module + participantIdentification + '\0'.
 *      For example the Transport prefix thread:
 *          With domainID (111) and participantId (22)
 *              "rTr11122"
 */
#define RTI_OSAPI_THREAD_NAME_PREFIX_MAX_SIZE 9
/*
 * Thread participant identification:
 *      5  characters + '\0'.
 */
#define RTI_OSAPI_THREAD_PARTICIPANT_ID_MAX_SIZE 6

/* The task type for the event thread */
#define RTI_OSAPI_EVENT_THREAD_TASK_TYPE "Evt"

/* The task type for the receive thread */
#define RTI_OSAPI_RECEIVE_THREAD_TASK_TYPE "Rcv"

extern RTIOsapiDllExport
void RTIOsapiThread_disableBacktraceSupport(void);

extern RTIOsapiDllExport
RTIBool RTIOsapiThread_enableBacktraceSupport(
        RTIOsapiThreadTssFactory *tssFactory);

extern RTIOsapiDllExport
void RTIOsapiThread_finalizeCachedBacktrace(RTIBool finalizeBacktraceNode);

extern RTIOsapiDllExport
RTIBool RTIOsapiThread_installSigsegvHandler(void);

extern RTIOsapiDllExport
void RTIOsapiThread_logBacktrace(
        int index,
        RTILogBacktraceDetailLevel detailLevel);

extern RTIOsapiDllExport
void RTIOsapiThread_addFunctionToDebugInfo(void *pointerFuncName);


#if (defined(RTI_DARWIN) || defined(RTI_WIN32) \
    || (defined(RTI_LINUX) \
      && ENABLE_FACE_COMPLIANCE == FACE_COMPLIANCE_LEVEL_NONE)) \
    && !defined(RTI_ANDROID)
  #define RTI_OSAPI_BACKTRACE_SUPPORTED
  #ifndef RTI_BACKTRACE_DISABLED_BY_DEFAULT
    /* Backtrace unit tests are supported */
    #define RTI_OSAPI_BACKTRACE_TEST_SUPPORTED
  #endif
#else
  /*
   * If backtrace is not supported:
   *     support FunctionHistory feature in debug mode.
   * FunctionHistory can be supported also by setting
   *     RTI_FUNCTION_HISTORY_SUPPORTED in the systemIncludes
   *     of the makefile of the platform, like:
   *        "systemIncludes += -DRTI_FUNCTION_HISTORY_SUPPORTED"
   */
  #ifdef RTI_PRECONDITION_TEST
    #define RTI_FUNCTION_HISTORY_SUPPORTED
  #endif /* RTI_PRECONDITION_TEST */
#endif

#if ((defined(RTI_DARWIN) || defined(RTI_LINUX) || defined(RTI_WIN32)) \
    && !defined(RTI_IOS) && !defined(RTI_ANDROID))
  #define RTI_OSAPI_SIGNAL_HANDLER_SUPPORTED 1
#endif


typedef void (*RTIOsapiThread_destroyWorkerMethod)(void *worker);

extern RTIOsapiDllVariable
RTIOsapiThread_destroyWorkerMethod RTIOsapiThread_destroyWorker;


typedef RTIBool (*RTIOsapiThread_associateWorkerMethod)(void *worker);

extern RTIOsapiDllVariable
RTIOsapiThread_associateWorkerMethod RTIOsapiThread_associateWorker;


typedef void * (*RTIOsapiThread_createWorkerMethod)(
        const char *name);

extern RTIOsapiDllVariable
RTIOsapiThread_createWorkerMethod RTIOsapiThread_createWorker;

extern RTIOsapiDllExport
RTI_UINT64 RTIOsapiThread_getId(struct RTIOsapiThread *self);


struct RTIOsapiThreadCpuInfo {
    RTI_UINT64 id;
    struct RTINtpTime cpuTime;
};


#define RTIOsapiThreadCpuInfo_INITIALIZER \
{ \
    0, \
    RTI_NTP_TIME_ZERO \
}

extern RTIOsapiDllExport
void RTIOsapiThread_getCpuInfo(
        struct RTIOsapiThread *self,
        struct RTIOsapiThreadCpuInfo *cpuInfo);



#if defined(RTI_LINUX) \
    || defined(RTI_DARWIN) \
    || defined(RTI_WIN32) \
    || defined(RTI_QNX)
  #define RTI_OSAPI_THREAD_CPU_INFO_SUPPORTED
#endif



#ifdef __cplusplus
    }	/* extern "C" */
#endif
    
#include "osapi/osapi_thread_impl.h"
    

#endif /* osapi_thread_h */
