/* (c) Copyright 2003-2021, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)osapi_heapContext_impl.h    generated by: makeheader    Fri Apr 23 00:09:53 2021
 *
 *		built from:	heapContext_impl.ifc
 */

#ifndef osapi_heapContext_impl_h
#define osapi_heapContext_impl_h


#ifdef __cplusplus
    extern "C" {
#endif



/* ========================================= */
/*  ContextSupport                           */
/* ========================================= */

#define RTIOsapiHeapContextSupport_assertContextTss(addContextTssToGlobalList) \
    RTIOsapiContextSupport_assertContextTss( \
            RTI_OSAPI_HEAP_CONTEXT_INDEX, \
            (addContextTssToGlobalList), \
            RTI_OSAPI_CONTEXT_STACK_SIZE_DEFAULT, \
            0)

#define RTIOsapiHeapContext_getDepth() \
    RTIOsapiContext_getDepth(RTI_OSAPI_HEAP_CONTEXT_INDEX)

/* ========================================= */
/*  ContextScope                             */
/* ========================================= */

#define RTIOsapiHeapContextScope_begin() \
    RTIOsapiContextScope_begin() \
    struct RTIOsapiHeapContextStackEntry __entry; \
    RTI_UINT32 __entryCount = 0

#define RTIOsapiHeapContextScope_start( \
        poolAllocParam, \
        poolBufferCountParam, \
        poolBufferSizeParam, \
        topicNameParam, \
        functionNameParam) \
    RTIOsapiHeapContextScope_begin(); \
    if (RTIOsapiHeap_isMonitoringEnabled()) { \
        __entry.poolAlloc = (poolAllocParam); \
        __entry.poolBufferCount = (poolBufferCountParam); \
        __entry.poolBufferSize = (poolBufferSizeParam); \
        __entry.topicName = (topicNameParam); \
        __entry.functionName = (functionNameParam); \
        RTIOsapiUtility_unusedReturnValue( \
                RTIOsapiContext_enter( \
                        RTI_OSAPI_HEAP_CONTEXT_INDEX, \
                        &__entry), \
                RTIBool); \
        __entryCount++; \
    }

#define RTIOsapiHeapContextScope_startPool( \
        poolAllocParam, \
        poolBufferCountParam, \
        poolBufferSizeParam) \
    RTIOsapiHeapContextScope_begin(); \
    if (RTIOsapiHeap_isMonitoringEnabled()) { \
        __entry.poolAlloc = (poolAllocParam); \
        __entry.poolBufferCount = (poolBufferCountParam); \
        __entry.poolBufferSize = (poolBufferSizeParam); \
        __entry.topicName = NULL; \
        __entry.functionName = NULL; \
        RTIOsapiUtility_unusedReturnValue( \
                RTIOsapiContext_enter( \
                        RTI_OSAPI_HEAP_CONTEXT_INDEX, \
                        &__entry), \
                RTIBool); \
        __entryCount++; \
    }

#define RTIOsapiHeapContextScope_enterActivity(topicNameParam) \
    if (RTIOsapiHeap_isMonitoringEnabled()) { \
        __entry.poolAlloc = RTI_FALSE; \
        __entry.poolBufferCount = 0; \
        __entry.poolBufferSize = 0; \
        __entry.topicName = (topicNameParam); \
        __entry.functionName = RTI_FUNCTION_NAME; \
        RTIOsapiUtility_unusedReturnValue( \
                RTIOsapiContext_enter( \
                        RTI_OSAPI_HEAP_CONTEXT_INDEX, \
                        &__entry), \
                RTIBool); \
        __entryCount++; \
    }

#define RTIOsapiHeapContextScope_startActivity(topicNameParam) \
    RTIOsapiHeapContextScope_begin(); \
    RTIOsapiHeapContextScope_enterActivity(topicNameParam)

#define RTIOsapiHeapContextScope_leaveEntries() \
    if (RTIOsapiHeap_isMonitoringEnabled()) { \
        RTIOsapiContext_leaveGroup( \
                NULL, /* heapContext */ \
                RTI_OSAPI_HEAP_CONTEXT_INDEX, \
                __entryCount); \
        __entryCount = 0; \
    }

#define RTIOsapiHeapContextScope_end() \
    RTIOsapiHeapContextScope_leaveEntries() \
    RTIOsapiContextScope_end()



#ifdef __cplusplus
    }	/* extern "C" */
#endif


#endif /* osapi_heapContext_impl_h */
