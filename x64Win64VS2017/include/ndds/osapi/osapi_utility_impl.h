/* (c) Copyright 2003-2021, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)osapi_utility_impl.h    generated by: makeheader    Fri Apr 23 00:10:12 2021
 *
 *		built from:	utility_impl.ifc
 */

#ifndef osapi_utility_impl_h
#define osapi_utility_impl_h





#ifdef __cplusplus
    extern "C" {
#endif


#define RTIOsapiUtility_max(l, r) (((l) > (r)) ? (l) : (r))
#define RTIOsapiUtility_min(l, r) (((l) < (r)) ? (l) : (r))
#define RTIOsapiUtility_abs(l) (((l) < 0) ? (-(l)) : (l))
#define RTIOsapiUtility_isWithinBound(n, lower, upper) (((n) >= (lower)) \
                                                        && ((n) <= (upper)))

#define RTIOsapiUtility_getSpaceLeft(length, max) \
    (((max) > (length)) \
            ? ((max) - (length)) \
            : 0)

#define RTIOsapiUtility_strlen(str) \
    (str == NULL ? 0 : strlen(str))

#define RTIOsapiUtility_strstr(src, pattern) \
    (src == NULL || pattern == NULL ? NULL : strstr(src, pattern))

#define RTIOsapiUtility_assertSpaceLeft(length, max, bytesToAssert) \
        (RTIOsapiUtility_getSpaceLeft(length, max) >= (bytesToAssert))

#define RTIOsapiUtility_unusedParameter(parameter) (void) parameter

/**
 * Note from CORE-10720:
 * Passing NULL as a variadic argument might result in undefined behavior
 * because the definition of NULL may vary across platforms. If it's not
 * defined as ((void *) 0) the value might be copied to the stack as 4 byte
 * int, and at a later point of the execution will be copied as an 8 byte
 * pointer resulting in corrupted memory that could lead into segmentation
 * faults. For this reason we use explicitly ((void *) 0)
 *
 * In order to prevent this issue we are forcing passing the type of the
 * argument by using this macro.
 */
#define RTIOsapiUtility_nullArg() (void *) 0

/*
 * Use this macro to remove warnings in situations where 
 * a function is assigning its return value to a variable but 
 * the variable is not being used anywhere. This will produce a
 * "set-but-unused variable warning".
 * 
 * @param function The function returning a value which is not being used
 * @param type     The type of the expected return value of function
 *
 */
#define RTIOsapiUtility_unusedReturnValue(function, type) \
{                                                         \
    type unusedReturnValue;                               \
    unusedReturnValue = function;                         \
    (void)unusedReturnValue;                              \
} (void)0

/*
 * Use these macros to remove strict-aliasing warnings. You may not dereference
 * a pointer that was casted to the wrong type, but you may assign a casted
 * pointer to a pointer of the correct type and then dereference that
 * correct-type pointer. This method should be more performant than calling
 * memcpy.
 */

#define RTIOsapiUtility_assignValueFromDereference(__dst, __srcPtr, __dstType) { \
    __dstType *__srcPtrTyped = (__dstType *) (__srcPtr); \
    __dst = *__srcPtrTyped; \
}

#define RTIOsapiUtility_assignDereferenceFromValue(__dstPtr, __src, __srcType) { \
    __srcType *__dstPtrTyped = (__srcType *) (__dstPtr); \
    *__dstPtrTyped = (__src); \
}

#define RTIOsapiUtility_assignDereferenceFromDereference(__dstPtr, __srcPtr, __dstType) { \
    __dstType *__dstPtrTyped = (__dstType *) (__dstPtr); \
    __dstType *__srcPtrTyped = (__dstType *) (__srcPtr); \
    *__dstPtrTyped = *__srcPtrTyped; \
}

/* Expands to the number of elements in an array */
#define RTIOsapiUtility_arraySize(x) (sizeof(x)/sizeof(x[0]))

/* Expands to a string representation of s */
#define RTIOsapiUtility_stringify(s) RTIOsapiUtility_s(s)
#define RTIOsapiUtility_s(s) #s

/* Following CORE-7848 */
#ifdef RTI_WIN32
  #define RTIOsapiUtility_sscanf sscanf_s
#else
  #define RTIOsapiUtility_sscanf sscanf
#endif


struct RTIOsapiInlineListNode {
    struct RTIOsapiInlineListNode *next;
    struct RTIOsapiInlineListNode *prev;
};



struct RTIOsapiInlineList {
    struct RTIOsapiInlineListNode *first;
    struct RTIOsapiInlineListNode *last;
};




#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* osapi_utility_impl_h */
