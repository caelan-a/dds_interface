/* (c) Copyright 2003-2021, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)osapi_heap.h    generated by: makeheader    Fri Apr 23 00:09:53 2021
 *
 *		built from:	heap.ifc
 */

#ifndef osapi_heap_h
#define osapi_heap_h



  #ifndef osapi_type_h
    #include "osapi/osapi_type.h"
  #endif
  #ifndef osapi_dll_h
    #include "osapi/osapi_dll.h"
  #endif
  #ifndef osapi_alignment_h
    #include "osapi/osapi_alignment.h"
  #endif
  #ifndef osapi_heapContext_h
    #include "osapi/osapi_heapContext.h"
  #endif

#ifdef __cplusplus
    extern "C" {
#endif


#define RTI_OSAPI_HEAP_MAX_ALLOC_SIZE (RTI_INT32_MAX-1024)

struct RTIOsapiHeapStat {
    /*e current heap used in Bytes */
    RTI_INT64 currentUsage;
    /*e maximum heap usage in Bytes */
    RTI_INT64 highWatermark;
    /*e minimum heap usage in Bytes */
    RTI_INT64 lowWatermark;
    /*e number of allocations (Realloc counted as Malloc + Free) */
    RTI_INT64 allocCount;
    /*e number of frees (Realloc counted as Malloc + Free) */
    RTI_INT64 freeCount;
    /*e the ID that will be assigned to the next allocated block
       0 => Statistics are not being gathered
       1 => No block have been allocated
       This value is not affected by a call to RTIOsapiStat_statReset
    */
    RTI_UINT64 nextBlockId;
};


#define RTI_OSAPI_HEAP_STAT_DEFAULT { \
0 /* currentUsage */, \
0 /* highWatermark */, \
0 /* lowWatermark */, \
0 /* allocCount */, \
0 /* freeCount */, \
0 /* nextBlockId */ \
}


#define RTI_OSAPI_HEAP_ALLOC_PREFIX 0x4E444440

typedef enum RTIOsapiHeapAllocatorKind {
    RTI_OSAPI_STRUCT_ALLOC       = 0x4E444441,
    RTI_OSAPI_STRING_ALLOC       = 0x4E444442,
    RTI_OSAPI_ARRAY_ALLOC        = 0x4E444443,
    RTI_OSAPI_BUFFER_ALLOC       = 0x4E444444,
    RTI_OSAPI_BUFFER_ALIGN_ALLOC = 0x4E444445,
    RTI_OSAPI_MALLOC_ALLOC       = 0x4E444446,
    RTI_OSAPI_FREED_BLOCK        = 0x7b9b9b9b
} RTIOsapiHeapAllocatorKind;

extern RTIOsapiDllExport void
RTIOsapiHeap_allocateString(void **stringStoragePointer, int stringSize);

extern RTIOsapiDllExport RTIBool
RTIOsapiHeap_reallocateString(char **stringStoragePointer, int stringSize);

extern RTIOsapiDllExport void
RTIOsapiHeap_freeString(char *stringStorage);

extern RTIOsapiDllExport void
RTIOsapiHeap_allocateBufferAligned(char **buffer, size_t size, 
                                   RTIOsapiAlignment alignment);

extern RTIOsapiDllExport
void RTIOsapiHeap_allocateBufferAlignedWithTypeName(
        char **buffer,
        size_t size,
        RTIOsapiAlignment alignment,
        char *typeName);

extern RTIOsapiDllExport void
RTIOsapiHeap_reallocateBufferAligned(char **buffer, size_t size, 
                                   RTIOsapiAlignment alignment);

extern RTIOsapiDllExport void
RTIOsapiHeap_allocateBufferNotAligned(char **buffer, size_t size);

extern RTIOsapiDllExport void
RTIOsapiHeap_allocateBufferNotAlignedWithAllocKind(
        char **buffer, 
        size_t size,
        RTIOsapiHeapAllocatorKind allocKind);

extern RTIOsapiDllExport void
RTIOsapiHeap_allocateBuffer(char **buffer, size_t size, 
                            RTIOsapiAlignment alignment);

extern RTIOsapiDllExport RTIBool
RTIOsapiHeap_reallocateBuffer(char *buffer, size_t size);

extern RTIOsapiDllExport void RTIOsapiHeap_freeBufferAligned(char *buffer);

extern RTIOsapiDllExport void RTIOsapiHeap_freeBuffer(char *buffer);

extern RTIOsapiDllExport void RTIOsapiHeap_statGet(struct RTIOsapiHeapStat *stat);

extern RTIOsapiDllExport void RTIOsapiHeap_statReset(void);

extern RTIOsapiDllExport 
RTIBool RTIOsapiHeap_blockInfoGet(
        const void *address,
        RTI_UINT64 *blockId,
        RTI_UINT64 *blockSize);

extern RTIOsapiDllExport void *RTIOsapiHeap_malloc(size_t size);

extern RTIOsapiDllExport
void *RTIOsapiHeap_mallocWithoutHeapHeader(size_t size);

extern RTIOsapiDllExport void *RTIOsapiHeap_calloc(size_t numElem, size_t elemSize);

extern RTIOsapiDllExport void *RTIOsapiHeap_realloc(void *ptr, int size);

extern RTIOsapiDllExport void RTIOsapiHeap_free(void *ptr);

extern RTIOsapiDllExport
void RTIOsapiHeap_freeWithoutHeapHeader(void *ptr);


typedef enum {
    /* The output of the snapshot will be in plain text */
    RTI_OSAPI_HEAP_SNAPSHOT_OUTPUT_FORMAT_STANDARD = 1,
    /*
     * The output of the snapshot will be compressed using
     * Zlib techonology.
     * The file can be uncompressed using zlib-flate.
     */
    RTI_OSAPI_HEAP_SNAPSHOT_OUTPUT_FORMAT_COMPRESSED = 2,
} RTIOsapiHeapSnapshotOutputFormat ;


typedef unsigned int RTIOsapiHeapSnapshotContentBitmap;


#define RTI_OSAPI_HEAP_SNAPSHOT_CONTENT_BIT_TOPIC       0x1
#define RTI_OSAPI_HEAP_SNAPSHOT_CONTENT_BIT_FUNCTION    0x2
#define RTI_OSAPI_HEAP_SNAPSHOT_CONTENT_BIT_ACTIVITY    0x4

#define RTI_OSAPI_HEAP_SNAPSHOT_CONTENT_MASK_DEFAULT \
        (RTI_OSAPI_HEAP_SNAPSHOT_CONTENT_BIT_TOPIC \
        | RTI_OSAPI_HEAP_SNAPSHOT_CONTENT_BIT_FUNCTION \
        | RTI_OSAPI_HEAP_SNAPSHOT_CONTENT_BIT_ACTIVITY)

#define RTI_OSAPI_HEAP_SNAPSHOT_CONTENT_MINIMAL  0x0


struct RTIOsapiHeapMonitoringProperty {
    /* Specify the format of the output of the snapshot. */
    RTIOsapiHeapSnapshotOutputFormat outputFormat;
    /*
     * It is a bitmap to decide which information of the snapshot will be
     * displayed.
     */
    RTIOsapiHeapSnapshotContentBitmap contentFormat;
};


#define RTIOsapiHeapMonitoringProperty_INITIALIZER { \
    RTI_OSAPI_HEAP_SNAPSHOT_OUTPUT_FORMAT_STANDARD, /* outputFormat */ \
    RTI_OSAPI_HEAP_SNAPSHOT_CONTENT_MASK_DEFAULT /* contentFormat */ \
}

extern RTIOsapiDllExport
void RTIOsapiHeapMonitoringProperty_initialize(
        struct RTIOsapiHeapMonitoringProperty *self);

extern RTIOsapiDllExport
void RTIOsapiHeapMonitoringProperty_copy(
        struct RTIOsapiHeapMonitoringProperty *self,
        const struct RTIOsapiHeapMonitoringProperty *src);

extern RTIOsapiDllExport
void RTIOsapiHeap_disableMonitoring(void);

extern RTIOsapiDllExport
RTIBool RTIOsapiHeap_enableMonitoring(void);

extern RTIOsapiDllExport
RTIBool RTIOsapiHeap_enableMonitoringWithParams(
        const struct RTIOsapiHeapMonitoringProperty *property);

extern RTIOsapiDllExport
RTIBool RTIOsapiHeap_isMonitoringEnabled(void);

extern RTIOsapiDllExport
RTIBool RTIOsapiHeap_pauseMonitoring(void);

extern RTIOsapiDllExport
RTIBool RTIOsapiHeap_resumeMonitoring(void);

extern RTIOsapiDllExport
RTIBool RTIOsapiHeap_snapshot(
        const char *fileName,
        RTIBool printDetails,
        const char *productVersion);


#ifdef __cplusplus
    }	/* extern "C" */
#endif

  #include "osapi/osapi_heap_impl.h"

#endif /* osapi_heap_h */
