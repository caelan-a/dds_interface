/* (c) Copyright 2003-2021, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)dds_c_log_impl.h    generated by: makeheader    Fri Apr 23 00:06:04 2021
 *
 *		built from:	log_impl.ifc
 */

#ifndef dds_c_log_impl_h
#define dds_c_log_impl_h


  /* For context support (used by macros below) */
  #ifndef osapi_thread_h
    #include "osapi/osapi_thread.h"
  #endif
  #ifndef advlog_context_h
    #include "advlog/advlog_context.h"
  #endif
  #ifndef dds_c_log_h
    #include "dds_c/dds_c_log.h"
  #endif
  #ifndef dds_c_dll_h
    #include "dds_c/dds_c_dll.h"
  #endif
#ifdef __cplusplus
    extern "C" {
#endif




/* ================================================================= */
/*                Storage for logging masks                          */
/* ================================================================= */
/*i @ingroup DDSLogModule
  @brief Stores the current setting for the submodule mask.

  Use DDSLog_getBitmaps() to set the submodule mask, and
  DDSLog_setBitmaps() to retrieve the current value.
 */
extern DDSCDllVariable RTILogBitmap DDSLog_g_submoduleMask;


/* ----------------------------------------------------------------- */
/*i @ingroup DDSLogModule
  @brief Stores the current setting for the instrumentation mask

  Use DDSLog_getBitmaps() to set the instrumentation mask, and
  DDSLog_setBitmaps() to retrieve the current value.
 */
extern DDSCDllVariable RTILogBitmap DDSLog_g_instrumentationMask;

/* ================================================================= */
/*                       Logging macros                              */
/* ================================================================= */

#define DDSLogMessage_log(INSTRUMENT_BIT, ...) \
    RTILogMessage_log( \
            DDSLog_g_instrumentationMask, \
            DDSLog_g_submoduleMask, \
            DDS_CURRENT_SUBMODULE, \
            RTI_LOG_PRINT_FORMAT_MASK_ALL, \
            (INSTRUMENT_BIT), \
            MODULE_DDS, \
            __VA_ARGS__)

/*i @ingroup DDSLogModule
*/
#define DDSLog_logWithFunctionName(INSTRUMENT_BIT, FUNCTION_NAME, ...) \
    RTILogMessage_logWithFunctionName( \
            DDSLog_g_instrumentationMask, \
            DDSLog_g_submoduleMask, \
            DDS_CURRENT_SUBMODULE, \
            RTI_LOG_PRINT_FORMAT_MASK_ALL, \
            (INSTRUMENT_BIT), \
            MODULE_DDS, \
            (FUNCTION_NAME), \
            __VA_ARGS__)

/*i @ingroup DDSLogModule
  @brief See \ref RTI_LOG_BIT_FATAL_ERROR
*/
#define DDSLog_fatal(...) \
    DDSLogMessage_log(RTI_LOG_BIT_FATAL_ERROR, __VA_ARGS__)

/*i @ingroup DDSLogModule 
  @brief See \ref RTI_LOG_BIT_EXCEPTION 
*/
#define DDSLog_exception(...) \
    DDSLogMessage_log(RTI_LOG_BIT_EXCEPTION, __VA_ARGS__)

/* ----------------------------------------------------------------- */
/*i @ingroup DDSLogModule 
  @brief See \ref RTI_LOG_BIT_WARN
*/
#define DDSLog_warn(...) \
    DDSLogMessage_log(RTI_LOG_BIT_WARN, __VA_ARGS__)

/* ----------------------------------------------------------------- */
/*i @ingroup DDSLogModule 
  @brief See \ref RTI_LOG_BIT_LOCAL
 */
#define DDSLog_local(...) \
    DDSLogMessage_log(RTI_LOG_BIT_LOCAL, __VA_ARGS__)

/* ----------------------------------------------------------------- */
/*i @ingroup DDSLogModule 
  @brief See \ref RTI_LOG_BIT_LOCAL
  
   Allows creation of a codeblock just for loggin purposes.
 */
  #define DDSLog_local_codeblock(codeblock) \
      if ((DDSLog_g_instrumentationMask & RTI_LOG_BIT_LOCAL) && \
          (DDSLog_g_submoduleMask & DDS_CURRENT_SUBMODULE)) {\
          codeblock \
      }          
/* ----------------------------------------------------------------- */
/*i @ingroup DDSLogModule 
  @brief See \ref RTI_LOG_BIT_REMOTE
*/
#define DDSLog_remote(...) \
    DDSLogMessage_log(RTI_LOG_BIT_REMOTE, __VA_ARGS__)

/* ----------------------------------------------------------------- */
/*i @ingroup DDSLogModule 
  @brief See \ref RTI_LOG_BIT_PERIODIC
 */
#define DDSLog_periodic(...) \
    DDSLogMessage_log(RTI_LOG_BIT_PERIODIC, __VA_ARGS__)

/* ----------------------------------------------------------------- */
/*i @ingroup DDSLogModule 
  @brief See \ref RTI_LOG_BIT_CONTENT
 */
#define DDSLog_content(...) \
    DDSLogMessage_log(RTI_LOG_BIT_CONTENT, __VA_ARGS__)

/* ----------------------------------------------------------------- */
/*i @ingroup DDSLogModule 
  @brief Indicate via log message that the precondition of a function failed
*/
  #define DDSLog_logPreconditionFailedWExpr(preconditionExpression) \
     DDSLog_fatal(                                             \
                      &RTI_LOG_PRECONDITION_FAILURE_s,         \
                      #preconditionExpression);   

/* ----------------------------------------------------------------- */
/*i @ingroup DDSLogModule
  @brief Indicate via log message that an accessor (get method) into
  an object failed
*/
  #define DDSLog_logGetFailed(memberName)                               \
                                                                        \
	DDSLog_exception(&RTI_LOG_GET_FAILURE_s, memberName);

/* ----------------------------------------------------------------- */
/*i @ingroup DDSLogModule
  @brief Generate a free form log message.

  @param instrumentBit A bit map as define by RTILogBitmap

  The message is free form, using the "printf" format, as illustrated
  in the example below.

  @see RTILogBitmap

  \code
	DDSLog_freeForm(RTI_LOG_BIT_EXCEPTION, "%s: error in", METHOD_NAME);
  \endcode
*/
#define DDSLog_freeForm(INSTRUMENT_BIT, ...) \
    RTILogParamString_logUnformatted( \
            DDSLog_g_instrumentationMask, \
            DDSLog_g_submoduleMask, \
            DDS_CURRENT_SUBMODULE, \
            (INSTRUMENT_BIT), \
            __VA_ARGS__)

/* ================================================================= */
/*            When RTI_PRECONDITION_TEST is #defined                 */
/* ================================================================= */
/*i @def DDSLog_preconditionOnly
  @ingroup DDSLogModule 

  @brief  Conditionally expands to the expression below, or nothing
  depending on whether RTI_PRECONDITION_TEST is defined

  \hideinitializer

  @param declaration the code to be injected if RTI_PRECONDITION_TEST 
  is defined
*/
#ifdef RTI_PRECONDITION_TEST 
  #define  DDSLog_preconditionOnly( declaration )  declaration
#else /* nothing */
  #define DDSLog_preconditionOnly( declaration ) 
#endif /* RTI_PRECONDITION_TEST */

/* ----------------------------------------------------------------- */

/*i @def DDSLog_testPrecondition
  @ingroup DDSLogModule 
  @brief Conditionally expands to the expression below, or nothing depending
  on whether RTI_PRECONDITION_TEST is defined 
  
  \hideinitializer

  @param preconditionExpression the expression to check
  @param failAction the action to take if the expression evaluates to true
*/
#define DDSLog_testPrecondition(preconditionExpression, failAction) \
  RTILog_testPrecondition(DDS, preconditionExpression, failAction)

#define DDSLog_checkPrecondition(preconditionExpression, failAction) \
  RTILog_checkPrecondition(DDS, preconditionExpression, failAction)


extern DDSCDllVariable const struct RTILogMessage
DDS_LOG_BAD_PARAMETER_s;

extern DDSCDllVariable const struct RTILogMessage
DDS_LOG_IMMUTABLE_POLICY_s;

extern DDSCDllVariable const struct RTILogMessage
DDS_LOG_OUT_OF_RESOURCES_s;

extern DDSCDllVariable const struct RTILogMessage
DDS_LOG_SEQUENCE_UNINITIALIZED;

extern DDSCDllVariable const struct RTILogMessage
DDS_LOG_SEQUENCE_NOT_OWNER;

extern DDSCDllVariable const struct RTILogMessage
DDS_LOG_AUTO_ENABLE_FAILURE;

extern DDSCDllVariable const struct RTILogMessage
DDS_LOG_GET_FAILURE_s;

extern DDSCDllVariable const struct RTILogMessage
DDS_LOG_CREATE_FAILURE_s;

extern DDSCDllVariable const struct RTILogMessage
DDS_LOG_INITIALIZE_FAILURE_s;

extern DDSCDllVariable const struct RTILogMessage
DDS_LOG_SET_FAILURE_s;

extern DDSCDllVariable const struct RTILogMessage
DDS_LOG_COMPARE_UNEQUAL_s;

extern DDSCDllVariable const struct RTILogMessage
DDS_LOG_STARTED_NDDS_VERSION_s;

extern DDSCDllVariable const struct RTILogMessage
DDS_LOG_NOT_ENABLED;

extern DDSCDllVariable const struct RTILogMessage
DDS_LOG_LOCK_ENTITY_FAILURE;

extern DDSCDllVariable const struct RTILogMessage
DDS_LOG_UNLOCK_ENTITY_FAILURE;


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* dds_c_log_impl_h */
