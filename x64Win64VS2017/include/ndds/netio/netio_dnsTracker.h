/* (c) Copyright 2003-2021, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)netio_dnsTracker.h    generated by: makeheader    Fri Apr 23 00:09:50 2021
 *
 *		built from:	dnsTracker.ifc
 */

#ifndef netio_dnsTracker_h
#define netio_dnsTracker_h


  #ifndef rti_makeheader_h
    #include "log/log_makeheader.h"
  #endif
  #ifndef osapi_thread_h
    #include "osapi/osapi_thread.h"
  #endif
  #ifndef osapi_semaphore_h
    #include "osapi/osapi_semaphore.h"
  #endif
  #ifndef reda_worker_h
    #include "reda/reda_worker.h"
  #endif
  #ifndef transport_common_user_h
    #include "transport/transport_common_user.h"
  #endif
  #ifndef netio_dll_h
    #include "netio/netio_dll.h"
  #endif
  #ifndef netio_common_h
    #include "netio/netio_common.h"
  #endif
  #ifndef netio_configurator_h
    #include "netio/netio_configurator.h"
  #endif


#ifdef __cplusplus
    extern "C" {
#endif


/* The maximum number of elements that the listener storage can hold. */
#define RTI_NETIO_DNS_TRACKER_LISTENER_STORAGE_DATA_MAX_SIZE 8


struct RTINetioDnsTrackerListenerStorage {
    void *field[RTI_NETIO_DNS_TRACKER_LISTENER_STORAGE_DATA_MAX_SIZE];
};


#define RTI_NETIO_DNS_TRACKER_LISTENER_STORAGE_DEFAULT \
        {{NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL}}


struct RTINetioDnsTrackerListener;


typedef RTIBool (*RTINetio_onHostnameUpdated_Fcn)(
        struct RTINetioDnsTrackerListener *listener,
        struct RTINetioDnsTrackerListenerStorage *storage,
        const struct RTINetioLocator *locator,
        const NDDS_Transport_Address_t *newAddress,
        struct REDAWorker *worker);


struct RTINetioDnsTrackerListener {
    RTINetio_onHostnameUpdated_Fcn onHostnameUpdated;
};


#define RTI_NETIO_DNS_TRACKER_LISTENER_DEFAULT \
        {NULL}


struct RTINetioDnsTracker;


struct RTINetioDnsTrackerProperty {
    /*
     * The period used to poll the DNS looking for updates. If set to infinite
     * the DNS tracker stops updating and therefore removing destinations from
     * its list.
     */
    struct RTINtpTime period;
};


#define RTI_NETIO_DNS_TRACKER_PROPERTY_DEFAULT {\
    RTI_NTP_TIME_MAX /* period */ \
}

extern RTINetioDllExport struct RTINetioDnsTracker *
RTINetioDnsTracker_new(
        const struct RTINetioConfigurator *configurator,
        const char *threadName,
        const struct RTINetioDnsTrackerProperty *property,
        const struct RTINetioDnsTrackerListener *listener,
        const struct RTINetioDnsTrackerListenerStorage *storage,
        struct REDAExclusiveArea *ea,
        struct REDAWorkerFactory *workerFactory);

extern RTINetioDllExport void
RTINetioDnsTracker_delete(struct RTINetioDnsTracker *me);

extern RTINetioDllExport RTIBool
RTINetioDnsTracker_assertDestination(
        struct RTINetioDnsTracker * me,
        const struct RTINetioLocator *destination,
        struct REDAWorker *worker);

extern RTINetioDllExport void
RTINetioDnsTracker_removeDestination(
        struct RTINetioDnsTracker * me,
        const struct RTINetioLocator *destination,
        struct REDAWorker *worker);

extern RTINetioDllExport RTIBool
RTINetioDnsTracker_setProperty(
        struct RTINetioDnsTracker *me,
        const struct RTINetioDnsTrackerProperty *newProperty,
        struct REDAWorker *worker);

extern RTINetioDllExport RTIBool
RTINetioDnsTracker_getProperty(
        struct RTINetioDnsTracker *me,
        struct RTINetioDnsTrackerProperty *property,
        struct REDAWorker *worker);


#ifdef __cplusplus
    }   /* extern "C" */
#endif

#endif /* netio_dnsTracker_h */
