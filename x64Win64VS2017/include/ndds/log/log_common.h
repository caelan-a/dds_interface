/* (c) Copyright 2003-2021, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)log_common.h    generated by: makeheader    Fri Apr 23 00:06:24 2021
 *
 *		built from:	common.ifc
 */

#ifndef log_common_h
#define log_common_h



#include <stdarg.h>

#ifndef log_makeheader_h
  #include "log/log_makeheader.h"
#endif
#ifndef log_dll_h
  #include "log/log_dll.h"
#endif

#ifdef __cplusplus
    extern "C" {
#endif


typedef unsigned int RTILogBitmap;


/*e \ingroup RTILogBitmapClass
  \brief Log a message with not applicable log level.
*/
#define RTI_LOG_BIT_NONE       (0x00000000)

/*e \ingroup RTILogBitmapClass
  \brief Log nothing, remain completely silent;
  		 good for production code running in the field.
*/
#define RTI_LOG_BIT_SILENCE       RTI_LOG_BIT_NONE

/*e \ingroup RTILogBitmapClass
  \brief Log all fatal errors.
*/
#define RTI_LOG_BIT_FATAL_ERROR   (0x00000001)

/*e \ingroup RTILogBitmapClass
  \brief Log all exceptions; these should be fixed completely before shipping!
*/
#define RTI_LOG_BIT_EXCEPTION     (0x00000002)

/*e \ingroup RTILogBitmapClass
  \brief Log all warnings; should check the source before shipping.
*/
#define RTI_LOG_BIT_WARN          (0x00000004)

/*e \ingroup RTILogBitmapClass
  \brief Log what is happening due to local object creation and destruction.
*/
#define RTI_LOG_BIT_LOCAL         (0x00000008)

/*e \ingroup RTILogBitmapClass
  \brief Log what is happening due to what other applications
  (not necessarily on another host, but in different address space)
  are creating and destroying.
*/
#define RTI_LOG_BIT_REMOTE        (0x00000010)

/*e \ingroup RTILogBitmapClass
  \brief Log periodic activities.
  Different than \ref RTI_LOG_BIT_LOCAL or \ref RTI_LOG_BIT_REMOTE
  in that this is NOT related to creation or destruction.

  This bit is used for periodic activities, such as sending a packet.
  Disabling this type of log message can significantly reduce logging
  output.
*/
#define RTI_LOG_BIT_PERIODIC      (0x00000020)

/*e \ingroup RTILogBitmapClass
  \brief For logging activity context enter/exit information.
*/
#define RTI_LOG_BIT_ACTIVITY      (0x00000040)

/*e \ingroup RTILogBitmapClass
  \brief Dump data content, to see what is being sent or received.
*/
#define RTI_LOG_BIT_CONTENT       (0x00000080)

/*e \ingroup RTILogBitmapClass
  \brief For logging those things that do not really belong in any of
  the other logging categories.
*/
#define RTI_LOG_BIT_OTHER         (0x00000100)

/*e \ingroup RTILogBitmapClass
  \brief Worker specific data.
*/
#define RTI_LOG_BIT_WORKER_STAT   (0x00000200)

/*e \ingroup RTILogBitmapClass
  \brief This will be the log level stored in the thread specific structrue
         for the log message if the Log macro had not specified the log level.
         This is set to 0x04000000 as this has to be mapped to verbosity in
         Java and Java expects signed integer. So we cannot use the msb.
*/
#define RTI_LOG_BIT_UNINITIALIZED   (0x04000000)

/*e \ingroup RTILogBitmapClass
	\brief Default bitmap.

    When using this default bitmap, only exceptions and fatal errors
    will be logged.
*/
#define RTI_LOG_BITMAP_DEFAULT (RTI_LOG_BIT_EXCEPTION | RTI_LOG_BIT_FATAL_ERROR)

/*e \ingroup RTILogBitmapClass
  \brief Enables setting the logging verbosity using a single number.

  @note This macro assumes the log message bitmaps are such that
  a more significant bit corresponds to a more verbose message.
  That is, nothing will be enabled for verbosity = -1,
  \ref RTI_LOG_BIT_EXCEPTION will be enabled for verbosity = 0,
  whereas enabling \ref RTI_LOG_BIT_WARN requires at least verbosity = 1.
  A given verbosity value automatically enables all log messages
  corresponding to lower verbosity values.
*/
#define RTILogBitmap_setFromVerbosity(verbosity) \
  (((verbosity) < 0)? 0 : (~(0xffffffff << ((verbosity) + 1))))

/****************************************************************************/
/*e \defgroup RTILogNumberBitmapClass RTILogNumberBitmap
  \ingroup RTILogModule
  \brief Each specific log message can also be represented by a unique
  matching log message number. This page defines how to compose and
  interpret log message numbers.

  For each standard log message, NDDS defines a corresponding
  log message number. This makes it possible to reduce the
  footprint of the NDDS libraries by not linking the error
  message strings. Instead, all log messages are represented by numbers.
  To report problems, production code in the field can make use of log
  message numbers only, while development code can use the
  actual log message.

  A log message number contains a variety of information, such as
  what product generated the message (e.g. NDDS), what module
  (e.g. netio, commend), submodule and so on. This information is encoded
  in separate parts of the 32 bit log message number, as described on
  this page.

  When building an NDDS module, link with \c Log_silent.msg.c instead of
  \c Log_normal.msg.c to use log numbers instead of log messages and
  thereby reduce the footprint of that module.

  Example (from \c Log_normal.msg.c in Netio):

  \code
  const struct RTILogMessage RTI_NETIO_LOG_BLOCK_s = {
    PRODUCT_WAVEWORKS|MODULE_NETIO|0,
    "%s blocking\n"
	};
  \endcode

  uniquely identifies the Netio blocking log message by the bitmap

  \code
  PRODUCT_WAVEWORKS|MODULE_NETIO|0
  \endcode

  which corresponds to 0x02070000 (message 0 in module Netio of the Waveworks
  product). See also \ref PRODUCT_WAVEWORKS and \ref MODULE_NETIO.

  The counterpart in \c Log_silent.msg.c of the code snippet above is

  \code
  const struct RTILogMessage RTI_NETIO_LOG_BLOCK_s = {
    PRODUCT_WAVEWORKS|MODULE_NETIO|0,
    NULL
	};
  \endcode

  which indeed does not contain the string and only the log message number.

  @see RTILogMessageClass

*/
/****************************************************************************/

/*e \ingroup RTILogNumberBitmapClass
  \brief Product portion of log message number => up to 256 products allowed.

  @see PRODUCT_WAVEWORKS
*/
#define RTI_LOG_PRODUCT_MASK   (0xff000000)

/*e \ingroup RTILogNumberBitmapClass
  \brief Module portion of log message number => up to 256 modules
  per product allowed.
*/
#define RTI_LOG_MODULE_MASK    (0x00ff0000)

/*e \ingroup RTILogNumberBitmapClass
  \brief Submodule portion of log message number => up to 64 submodules
  per module allowed.
*/
#define RTI_LOG_SUBMODULE_MASK (0x0000fc00)

/*e \ingroup RTILogNumberBitmapClass
  \brief Message specific to a submodule => up to 1024 messages
  per submodule allowed.
*/
#define RTI_LOG_ERROR_MASK     (0x000003ff)

/*e \ingroup RTILogNumberBitmapClass
  \brief Macro to extract the product ID from the log message number.

	@see RTI_LOG_PRODUCT_MASK
*/
#define RTI_LOG_getProductId(mask) (((mask)&RTI_LOG_PRODUCT_MASK) >> 24)

/*e \ingroup RTILogNumberBitmapClass
   \brief Macro to extract the module ID from the log message number.

	@see RTI_LOG_MODULE_MASK
*/
#define RTI_LOG_getModuleId(mask) (((mask)&RTI_LOG_MODULE_MASK) >> 16)

/*e \ingroup RTILogNumberBitmapClass
	\brief Macro to extract the submodule ID from the log message number.

	@see RTI_LOG_SUBMODULE_MASK
*/
#define RTI_LOG_getSubmoduleId(mask) (((mask)&RTI_LOG_SUBMODULE_MASK) >> 10)

/*e \ingroup RTILogNumberBitmapClass
	\brief Macro to extract the error ID from the log message number.

	@see RTI_LOG_ERROR_MASK
*/
#define RTI_LOG_getErrorId(mask) ((mask)&RTI_LOG_ERROR_MASK)

#define RTI_LOG_FORMAT_X_LENGTH (11)
#define RTI_LOG_FORMAT_XX_LENGTH (22)

/*e \ingroup RTILogNumberBitmapClass
  \brief The most significant byte of a
  log message number defines the product that generated the log message.
  Use this bitmask to specify Waveworks.

  @see RTI_LOG_PRODUCT_MASK
*/
#define PRODUCT_WAVEWORKS (0x02000000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify LOG module in log message number.

	@see RTI_LOG_MODULE_MASK
*/
#define MODULE_LOG          (0x000000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify TEST module in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_TEST         (0x010000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify OSAPI module in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_OSAPI        (0x020000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify CLOCK module in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_CLOCK        (0x030000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify REDA module in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_REDA         (0x040000)

/*e \ingroup RTILogNumberBitmapClass
 \brief Bitmap to specify ADVLOG module in log message number.

 @see RTI_LOG_MODULE_MASK
 */
#define MODULE_ADVLOG       (0x050000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify EVENT module in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_EVENT        (0x060000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify CDR module in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_CDR          (0x070000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify TRANSPORT module in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_TRANSPORT    (0x080000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify NETIO module in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_NETIO        (0x090000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify MIG module in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_MIG          (0x0A0000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify COMMEND module in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_COMMEND      (0x0B0000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify DISC module in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_DISC         (0x0C0000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify PRES module in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_PRES         (0x0D0000)

/*e \ingroup RTILogNumberBitmapClass
        \brief Bitmap to specify core_version module in log message number.

        @see RTI_LOG_MODULE_MASK
 */
#define MODULE_VERS       (0x0E0000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify DDS moduleS in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_DDS          (0x0F0000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify TESTSUITE module in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_TESTSUITE    (0x100000)

/*e \ingroup RTILogNumberBitmapClass
        \brief Bitmap to specify RTIDDSGEN(2) module in log message number.

        @see RTI_LOG_MODULE_MASK
 */
#define MODULE_RTIDDSGEN  (0x110000)

/*e \ingroup RTILogNumberBitmapClass
 *  \brief Bitmap to specify SECURITY module in log message number.
 *
 *  @see RTI_LOG_MODULE_MASK
 */
#define MODULE_SECURITY  (0x120000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify DISCSTATIC module in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_DISCSTATIC       (0x130000)

/*e \ingroup RTILogNumberBitmapClass
 \brief Bitmap to specify lua module in log message number.

 @see RTI_LOG_MODULE_MASK
 */
#define MODULE_LUA       (0x140000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify DL_DRIVER module in log message number.

	@see RTI_LOG_MODULE_MASK
*/
#define MODULE_DLDRIVER  (0x150000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify WRITERHISTORY module in log message number.

	@see RTI_LOG_MODULE_MASK
*/
#define MODULE_WRITERHISTORY  (0x160000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify PERSISTENCE module in log message number.

	@see RTI_LOG_MODULE_MASK
*/
#define MODULE_PERSISTENCE  (0x170000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify TRANSPORT_WAN module in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_TRANSPORT_WAN  (0x180000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify TRANSPORT_TLS module in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_TRANSPORT_TLS  (0x190000)

/*e \ingroup RTILogNumberBitmapClass
        \brief Bitmap to specify transport lbrtps modules in log message number.

        @see RTI_LOG_MODULE_MASK
 */
#define MODULE_LBRTPS            (0x1A0000)

/*e \ingroup RTILogNumberBitmapClass
        \brief Bitmap to specify RTIXML module in log message number.

        @see RTI_LOG_MODULE_MASK
 */
#define MODULE_RTIXML         (0x1B0000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify ROUTER module in log message number.

	@see RTI_LOG_MODULE_MASK
*/
#define MODULE_ROUTER  (0x1C0000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify METP module in log message number.

	@see RTI_LOG_MODULE_MASK
*/
#define MODULE_METP  (0x1d0000)

/*e \ingroup RTILogNumberBitmapClass
	\brief Bitmap to specify TRANSPORT_TCP module in log message number.

	@see RTI_LOG_MODULE_MASK
 */
#define MODULE_TRANSPORT_TCP  (0x1e0000)

/*e \ingroup RTILogNumberBitmapClass
        \brief Bitmap to specify RTITLS module in log message number.

        @see RTI_LOG_MODULE_MASK
 */
#define MODULE_RTITLS         (0x1F0000)

/*e \ingroup RTILogNumberBitmapClass
      \brief Bitmap to specify transport_zrtps module in log message number.

      @see RTI_LOG_MODULE_MASK
*/
#define MODULE_ZRTPS (0x210000)

/*e \ingroup RTILogNumberBitmapClass
      \brief Bitmap to specify LBPDISCOVERY module in log message number.

      @see RTI_LOG_MODULE_MASK
*/
#define MODULE_LBPDISCOVERY (0x230000)

/*e \ingroup RTILogNumberBitmapClass
      \brief Bitmap to specify LBEDISCOVERY module in log message number.

      @see RTI_LOG_MODULE_MASK
*/
#define MODULE_LBEDISCOVERY (0x240000)

/*e \ingroup RTILogNumberBitmapClass
      \brief Bitmap to specify TRANSPORT_PCIE module in log message number.

      @see RTI_LOG_MODULE_MASK
*/
#define MODULE_TRANSPORT_PCIE (0x250000)
/*e \ingroup RTILogNumberBitmapClass
      \brief Bitmap to specify XMQ module in log message number.

      @see RTI_LOG_MODULE_MASK
*/
#define MODULE_XMQ (0x260000)

/*e \ingroup RTILogNumberBitmapClass
      \brief Bitmap to specify LUA_BINDING module in log message number.

      @see RTI_LOG_MODULE_MASK
*/
#define MODULE_LUABINDING (0x270000)

/*e \ingroup RTILogNumberBitmapClass
      \brief Bitmap to specify QUEUE module in log message number.

      @see RTI_LOG_MODULE_MASK
*/
#define MODULE_QUEUE (0x280000)

/*e \ingroup RTILogNumberBitmapClass
      \brief Bitmap to specify RECORDER module in log message number.

      @see RTI_LOG_MODULE_MASK
*/
#define MODULE_RECORDER (0x290000)

/*e \ingroup RTILogNumberBitmapClass
      \brief Bitmap to specify RTIXMLUTILS module in log message number.

      @see RTI_LOG_MODULE_MASK
 */
#define MODULE_RTIXMLUTILS (0x2A0000)

/*e \ingroup RTILogNumberBitmapClass
      \brief Bitmap to specify CDS module in log message number.

      @see RTI_LOG_MODULE_MASK
 */
#define MODULE_CDS (0x2B0000)

/*e \ingroup RTILogNumberBitmapClass
        \brief Bitmap to specify XCDR module in log message number.

        @see RTI_LOG_MODULE_MASK
 */
#define MODULE_XCDR (0x2C0000)

/*e \ingroup RTILogNumberBitmapClass
 *       \brief Bitmap to specify Property module in log message number.
 *
 *       @see RTI_LOG_MODULE_MASK
 */
#define MODULE_PROPERTY (0x2D0000)

/*e \ingroup RTILogNumberBitmapClass
 *  @brief Bitmap to specify NETIO_CAP module in log message number.
 *
 *  @see RTI_LOG_MODULE_MASK
 */
#define MODULE_NETIO_CAP (0x2E0000)

/*e \ingroup RTILogNumberBitmapClass
 *       \brief Bitmap to specify JSON module in log message number.
 *
 *       @see RTI_LOG_MODULE_MASK
 */
#define MODULE_JSON (0x2F0000)

/*e \ingroup RTILogNumberBitmapClass
 *       \brief Bitmap to specify APPUTILS module in log message number.
 *
 *       @see RTI_LOG_MODULE_MASK
 */
#define MODULE_APPUTILS (0x300000)

/*******************************************************************************/

typedef unsigned int RTILogLevel;


#define RTI_LOG_COUNT_LOG_LEVELS 6

/*e
  \brief Log level fatal error
*/
#define RTI_LOG_LEVEL_FATAL_ERROR 0

/*e
  \brief Log level exception
*/
#define RTI_LOG_LEVEL_ERROR 1

/*e
  \brief Log level warning
*/
#define RTI_LOG_LEVEL_WARNING 2

/*e
  \brief Log level local
*/
#define RTI_LOG_LEVEL_STATUS_LOCAL 3

/*e
  \brief Log level remote
*/
#define RTI_LOG_LEVEL_STATUS_REMOTE 4

/*e
  \brief Log level debug
*/
#define RTI_LOG_LEVEL_DEBUG 5

/* \ingroup RTILogPrintBitmapClass
   @brief Get the logLevel from the instrumentBit.
        In the case that the instrumentBit is a mask, get the logLevel more
        restrictive.
*/
#define RTILog_getLogLevelFromInstrumentBit(instrumentBit) \
    ((instrumentBit & RTI_LOG_BIT_FATAL_ERROR) \
        ? (RTI_LOG_LEVEL_FATAL_ERROR) \
        : ((instrumentBit & RTI_LOG_BIT_EXCEPTION) \
            ? (RTI_LOG_LEVEL_ERROR) \
            : ((instrumentBit & RTI_LOG_BIT_WARN) \
                ? (RTI_LOG_LEVEL_WARNING) \
                : ((instrumentBit & RTI_LOG_BIT_LOCAL) \
                    ? (RTI_LOG_LEVEL_STATUS_LOCAL) \
                    : ((instrumentBit & RTI_LOG_BIT_REMOTE) \
                        ? (RTI_LOG_LEVEL_STATUS_REMOTE) \
                        : (RTI_LOG_LEVEL_DEBUG))))))

extern RTILogDllVariable
const RTILogBitmap RTI_LOG_INSTRUMENT_BIT_FROM_LOG_LEVEL[RTI_LOG_COUNT_LOG_LEVELS];


#define RTILog_getInstrumentBitFromLogLevel(LEVEL) \
    (((LEVEL) >= RTI_LOG_COUNT_LOG_LEVELS) \
        ? RTI_LOG_LEVEL_DEBUG \
        : RTI_LOG_INSTRUMENT_BIT_FROM_LOG_LEVEL[(LEVEL)])


#define RTI_LOG_formSubmoduleSpecificNumber(module, submodule, num) \
    (PRODUCT_WAVEWORKS | (module) | (submodule) | (num))

#define RTI_LOG_FAIL_REASON_PRECONDITION \
    RTI_LOG_formSubmoduleSpecificNumber(MODULE_LOG, 0, 0xFF)

#define RTI_LOG_FORMAT_1X "0x%08X"
#define RTI_LOG_FORMAT_2X "0x%08X,0x%08X"
#define RTI_LOG_FORMAT_3X "0x%08X,0x%08X,0x%08X"
#define RTI_LOG_FORMAT_4X "0x%08X,0x%08X,0x%08X,0x%08X"
#define RTI_LOG_FORMAT_5X "0x%08X,0x%08X,0x%08X,0x%08X,0x%08X"
#define RTI_LOG_FORMAT_9X "0x%08X,0x%08X,0x%08X,0x%08X,0x%08X,0x%08X,0x%08X,0x%08X,0x%08X"

#define RTILogPrintDescriptor const char *

extern RTILogDllVariable
const char *RTI_LOG_PRINT_DESCRIPTOR_COMPACT_SENTINEL;

extern RTILogDllExport
int RTILogPrintDescriptor_isCompact(RTILogPrintDescriptor printDescriptor);


#define RTILogPrintDescriptor_isCompact(__desc) \
    ((__desc) == RTI_LOG_PRINT_DESCRIPTOR_COMPACT_SENTINEL)

struct RTILogMessage {
    /* specifies a number for the log message */
    unsigned int logNumber;
    /* specifies the format of the log message */
    const char *format;
};


#define RTI_LOG_MSG_SIZE_MAX 1024
#define RTI_LOG_FORMAT_SIZE_MAX 768
/* will be truncated if too long: */
#define RTI_LOG_CONTEXT_FILENAME_LENGTH_MAX 120
#define RTI_LOG_CONTEXT_METHOD_LENGTH_MAX    80

typedef unsigned int RTILogPrintFormatKindMask;

typedef int (*RTILogOnMessageMethod)(
        RTILogPrintFormatKindMask formatMask,
        RTILogLevel logLevel,
        const char *msg);

extern RTILogDllVariable RTILogOnMessageMethod RTILog_onMessage;


/* \ingroup RTILogPrintBitmapClass
   @brief Print the log number; good for minimal logging
*/
#define RTI_LOG_PRINT_BIT_NUMBER    0x1
/* \ingroup RTILogPrintBitmapClass
   @brief Print the log message (enabled by default)
*/
#define RTI_LOG_PRINT_BIT_MSG       0x2

/* -- Location context bits */
/* \ingroup RTILogPrintBitmapClass
   @brief Print the calling module (can augment the msg number)
*/
#define RTI_LOG_PRINT_BIT_AT_MODULE	0x04
/* \ingroup RTILogPrintBitmapClass
   @brief Print filename location
*/
#define RTI_LOG_PRINT_BIT_AT_FILE	0x08
/* \ingroup RTILogPrintBitmapClass
   @brief Print method location context
*/
#define RTI_LOG_PRINT_BIT_AT_METHOD     0x10
/* \ingroup RTILogPrintBitmapClass
   @brief Print line number location
*/
#define RTI_LOG_PRINT_BIT_AT_LINE	0x20
/* \ingroup RTILogPrintBitmapClass
   @brief Log backtrace
*/
#define RTI_LOG_PRINT_BIT_BACKTRACE     0x40

#ifdef RTI_BACKTRACE_DISABLED_BY_DEFAULT
/* \ingroup RTILogPrintBitmapClass
 *  @brief For certain architectures (RTI_BACKTRACE_DISABLED_BY_DEFAULT) the
 * backtrace is disabled by default.
 * In case a user using those architectures wants to use the backtrace
 * functionality, they would have to set the this bit
 * (RTI_LOG_PRINT_BIT_FORCE_BACKTRACE) in the printFormat.
 * It will force the enabling of the backtrace.
 */
#define RTI_LOG_PRINT_BIT_FORCE_BACKTRACE 0x80
#endif

/* \ingroup RTILogPrintBitmapClass
   @brief Use colors
*/
#define RTI_LOG_PRINT_COMMON_BIT_COLORIZE                       0x10000000
/* \ingroup RTILogPrintBitmapClass
 * @brief Override defaults. If set, use the bits 0XXXX XXXX as the default.
 */
#define RTI_LOG_PRINT_COMMON_BIT_OVERRIDE_DEFAULT               0x40000000
/* \ingroup RTILogPrintBitmapClass
 * @brief Use default. If set, the mask is ignored and the default is used
 * instead.
 */
#define RTI_LOG_PRINT_COMMON_BIT_USE_DEFAULT                    0x80000000

/* \ingroup RTILogPrintBitmapClass
   @brief Collection of location bits
*/
#define RTI_LOG_PRINT_LOCATION_MASK \
	(RTI_LOG_PRINT_BIT_AT_MODULE | RTI_LOG_PRINT_BIT_AT_FILE | \
	 RTI_LOG_PRINT_BIT_AT_METHOD | RTI_LOG_PRINT_BIT_AT_LINE)

/* \ingroup RTILogPrintBitmapClass
   @brief Default print format for the logger in log.1.0
*/
#define RTI_LOG_PRINT_FORMAT_MASK_DEFAULT \
    (RTI_LOG_PRINT_BIT_MSG | RTI_LOG_PRINT_BIT_AT_METHOD)

/* \ingroup RTILogPrintBitmapClass
   @brief Default print format for the logger in log.1.0
*/
#define RTI_LOG_PRINT_FORMAT_MASK_DEBUG \
    (RTI_LOG_PRINT_BIT_NUMBER \
    | RTI_LOG_PRINT_BIT_MSG \
    | RTI_LOG_PRINT_BIT_AT_FILE \
    | RTI_LOG_PRINT_BIT_AT_LINE \
    | RTI_LOG_PRINT_BIT_AT_MODULE \
    | RTI_LOG_PRINT_BIT_BACKTRACE)

/* \ingroup RTILogPrintBitmapClass
 *  @brief All the bits for the print format for the logger set to 1.
 */
#define RTI_LOG_PRINT_FORMAT_MASK_ALL 0xFFFFFFFF
/* \ingroup RTILogPrintBitmapClass
 *  @brief All the bits for the print format for the logger set to 0.
 */
#define RTI_LOG_PRINT_FORMAT_MASK_NONE 0x00000000

/* \ingroup RTILogPrintBitmapClass
 *  @brief All the bits for the location filename print format.
 */
#define RTI_LOG_PRINT_FORMAT_MASK_LOCATION_FILELINE \
    (RTI_LOG_PRINT_BIT_AT_FILE \
    | RTI_LOG_PRINT_BIT_AT_LINE)

/* \ingroup RTILogPrintBitmapClass
 *  @brief All the bits for the location filename and module print format.
 */
#define RTI_LOG_PRINT_FORMAT_MASK_LOCATION_FILELINE_AND_MODULE \
    (RTI_LOG_PRINT_FORMAT_MASK_LOCATION_FILELINE \
    | RTI_LOG_PRINT_BIT_AT_MODULE)

/* \ingroup RTILogPrintBitmapClass
 *  @brief All the bits for the location print format.
 */
#define RTI_LOG_PRINT_FORMAT_MASK_LOCATION \
    (RTI_LOG_PRINT_FORMAT_MASK_LOCATION_FILELINE_AND_MODULE \
    | RTI_LOG_PRINT_BIT_AT_METHOD)

/* \ingroup RTILogPrintBitmapClass
 *  @brief All the bits for the print format for the logger set to 1 except the
 *  location one.
 */
#define RTI_LOG_PRINT_FORMAT_MASK_ALL_EXCEPT_LOCATION \
    (RTI_LOG_PRINT_FORMAT_MASK_ALL \
    & ~RTI_LOG_PRINT_FORMAT_MASK_LOCATION)

/* \ingroup RTILogPrintBitmapClass
 *  @brief All the bits for the print format for the logger set to 1 except the
 *  location filename.
 */
#define RTI_LOG_PRINT_FORMAT_MASK_ALL_EXCEPT_LOCATION_FILELINE \
    (RTI_LOG_PRINT_FORMAT_MASK_ALL \
    & ~RTI_LOG_PRINT_FORMAT_MASK_LOCATION_FILELINE)

/* \ingroup RTILogPrintBitmapClass
 *  @brief All the bits for the print format for the logger set to 1 except the
 *  location filename and module.
 */
#define RTI_LOG_PRINT_FORMAT_MASK_ALL_EXCEPT_LOCATION_FILELINE_AND_MODULE \
    (RTI_LOG_PRINT_FORMAT_MASK_ALL \
    & ~RTI_LOG_PRINT_FORMAT_MASK_LOCATION_FILELINE_AND_MODULE)

#define RTI_LOG_PRINT_FORMAT_MASK_FATAL_DEFAULT RTI_LOG_PRINT_FORMAT_MASK_DEBUG

/*
 * @brief Returns the function name within the current context.
 */
#if defined(RTI_WIN32) || defined(RTI_INTIME) || defined(RTI_INTY) || defined(__DCC__)
    #define RTI_FUNCTION_NAME __FUNCTION__
#else
    #define RTI_FUNCTION_NAME __func__
#endif

/*
 * @brief Returns the line number of the sentence executed within the current
 * context.
 */
#define RTI_LINE_NUMBER __LINE__

/*
 * @brief Returns the file name associated with the code executed within the
 * current context.
 */
#define RTI_FILE_NAME __FILE__

/* \ingroup RTILogModule
 * @brief Log the backtrace if the print format bit (RTI_LOG_PRINT_BIT_BACKTRACE)
 * is configured for at least one of the logLevels.
 */
#define RTILog_logBacktraceIfAvailable() \
    if (RTILog_logBacktrace != NULL \
            && (RTILog_printMask[RTI_LOG_LEVEL_FATAL_ERROR] \
                    & RTI_LOG_PRINT_BIT_BACKTRACE \
            || RTILog_printMask[RTI_LOG_LEVEL_ERROR] \
                    & RTI_LOG_PRINT_BIT_BACKTRACE \
            || RTILog_printMask[RTI_LOG_LEVEL_WARNING] \
                    & RTI_LOG_PRINT_BIT_BACKTRACE \
            || RTILog_printMask[RTI_LOG_LEVEL_STATUS_LOCAL] \
                    & RTI_LOG_PRINT_BIT_BACKTRACE \
            || RTILog_printMask[RTI_LOG_LEVEL_STATUS_REMOTE] \
                    & RTI_LOG_PRINT_BIT_BACKTRACE \
            || RTILog_printMask[RTI_LOG_LEVEL_DEBUG] \
                    & RTI_LOG_PRINT_BIT_BACKTRACE)) { \
        RTILog_logBacktrace(1, RTI_LOG_BACKTRACE_DETAIL_LEVEL_BEST_SPEED); \
    }



#define RTI_LOG_COLOR_RESET "\033[0m"
#define RTI_LOG_COLOR_BOLD_BLACK "\033[1;30m"
#define RTI_LOG_COLOR_RED "\033[0;31m"
#define RTI_LOG_COLOR_GREEN "\033[0;32m"
#define RTI_LOG_COLOR_YELLOW "\033[0;33m"
#define RTI_LOG_COLOR_BLUE "\033[0;34m"

#define RTILog_setColorFormat(destBuffer, bytesRemaining, colorValue) \
        strncat(destBuffer, colorValue, bytesRemaining)

#define RTILog_resetColorFormat(destBuffer, bytesRemaining) \
        RTILog_setColorFormat(destBuffer, bytesRemaining, RTI_LOG_COLOR_RESET)

#define RTILog_appendFormatString( \
        destBuffer, \
        availableSize, \
        bufferSize, \
        formatString, \
        setColor, \
        resetColor, \
        colorValue) \
{ \
    size_t localAvailableSize = availableSize; \
    /* Make sure the format (potentially, with color), fits the buffer */ \
    size_t actualAvailableSize = availableSize; \
    \
    if (setColor) { \
        actualAvailableSize -= strlen(colorValue); \
    } \
    if (resetColor) { \
        actualAvailableSize -= strlen(RTI_LOG_COLOR_RESET); \
    } \
    \
    if (strlen(formatString) <= actualAvailableSize) { \
        if (setColor) { \
            RTILog_setColorFormat(destBuffer, localAvailableSize, colorValue); \
            localAvailableSize = bufferSize - strlen(destBuffer) - 1; \
        } \
        strncat(destBuffer, formatString, localAvailableSize); \
        if (resetColor) { \
            localAvailableSize = bufferSize - strlen(destBuffer) - 1; \
            RTILog_resetColorFormat(destBuffer, localAvailableSize); \
        } \
    } \
}

extern RTILogDllExport
int RTILogMessage_printWithParams(
        RTILogPrintFormatKindMask formatMask,
        RTILogBitmap instrumentBit,
        unsigned int moduleId,
        const char *filename,
        unsigned int lineno,
        const char *method,
        const struct RTILogMessage *message,
        ...);

extern RTILogDllExport
int RTILogMessage_vprintWithParams(
        RTILogPrintFormatKindMask formatMask,
        RTILogBitmap instrumentBit,
        unsigned int moduleId,
        const char *filename,
        unsigned int lineno,
        const char *method,
        const struct RTILogMessage *message,
        va_list ap);

extern RTILogDllExport
int RTILogParamString_printWithParams(
        RTILogPrintFormatKindMask formatMask,
        RTILogBitmap instrumentBit,
        unsigned int moduleId,
        const char *filename,
        unsigned int lineno,
        const char *method,
        const char *parameterizedString,
        ...);

extern RTILogDllExport
int RTILogString_printWithParams(
        RTILogPrintFormatKindMask formatMask,
        RTILogBitmap instrumentBit,
        unsigned int moduleId,
        const char *filename,
        unsigned int lineno,
        const char *method,
        const char *string,
        unsigned int length);


#if !defined(RTI_LOG_EXTENDED_DISABLED)
  #define RTI_LOG_EXTENDED
#endif



/*i \ingroup RTILogModule
 * @brief Print a LogMessage without applying any kind of filtering.
 *
 *  Main logging function. It is used per module for logging.
 *  Used to support all the production logging.
 *  It requires a RTILogMessage and a list of params.
 *  This function adds metadata for the printFormat. It can be configured by the
 *  argument formatMask to filter out selected formats.
 *  The instrumentBit represents the logLevel of the message.
 *
 * @param FORMAT_MASK \b In. Filter out selected formats. Some examples of the
 * masks you can use are:
 *  - RTI_LOG_PRINT_FORMAT_MASK_NONE: no printFormat will be applied.
 *  - RTI_LOG_PRINT_FORMAT_MASK_ALL: the printFormat set by the user will
 *  be applied.
 * @INSTRUMENT_BIT \b In. It represents the logLevel of the message.
 *  It is used to get the printFormat of the logLevel.
 * @param MODULE_ID \b In. It is used for the printFormat RTI_LOG_PRINT_BIT_AT_MODULE.
 * @param ... \b In. A LogMessage and optionally list of params of the message.
 */
#define RTILogMessage_print( \
        FORMAT_MASK, \
        INSTRUMENT_BIT, \
        MODULE_ID, \
        ...) \
    RTILogMessage_printWithParams( \
            (FORMAT_MASK), \
            (INSTRUMENT_BIT), \
            (MODULE_ID), \
            RTI_FILE_NAME, \
            RTI_LINE_NUMBER, \
            RTI_FUNCTION_NAME, \
            __VA_ARGS__)


/*i \ingroup RTILogModule
 * @brief Apply a verbosity filter, then print a LogMessage.
 *
 *  Main logging function. It is used per module for logging.
 *  Used to support all the production logging.
 *  It requires a RTILogMessage and a list of params.
 *  This function adds metadata for the printFormat. It can be configured by the
 *  argument formatMask to filter out selected formats.
 *  The instrumentBit represents the logLevel of the message.
 *
 * @param INSTRUMENT_MASK \b In. It is used to verbosity filter.
 * @param SUBMODULE_MASK \b In. It is used to category filter.
 * @param SUBMODULE_ID \b In. It is used to category filter.
 * @param FORMAT_MASK \b In. Filter out selected formats. Some examples of the
 * masks you can use are:
 *  - RTI_LOG_PRINT_FORMAT_MASK_NONE: no printFormat will be applied.
 *  - RTI_LOG_PRINT_FORMAT_MASK_ALL: the printFormat set by the user will
 *  be applied.
 * @INSTRUMENT_BIT \b In. It represents the logLevel of the message.
 *  It is used to get the printFormat of the logLevel.
 * @param MODULE_ID \b In. It is used for the printFormat RTI_LOG_PRINT_BIT_AT_MODULE.
 * @param FILE_NAME \b In. It is used for the printFormat RTI_LOG_PRINT_BIT_AT_FILE.
 * @param LINE_NUMBER \b In. It is used for the printFormat RTI_LOG_PRINT_BIT_AT_LINE.
 * @param FUNCTION_NAME \b In. It is used for the printFormat RTI_LOG_PRINT_BIT_AT_METHOD.
 * @param ... \b In. A LogMessage and optionally list of params of the message.
 */
#define RTILogMessage_logWithParams( \
        /* Filtering-only params */ \
        INSTRUMENT_MASK, \
        SUBMODULE_MASK, \
        SUBMODULE_ID, \
        /* Print params */ \
        FORMAT_MASK, \
        INSTRUMENT_BIT, \
        MODULE_ID, \
        FILE_NAME, \
        LINE_NUMBER, \
        FUNCTION_NAME, \
        ...) \
    if (((INSTRUMENT_MASK) & (INSTRUMENT_BIT)) \
            && ((SUBMODULE_MASK) & (SUBMODULE_ID))) \
        RTILogMessage_printWithParams( \
                (FORMAT_MASK), \
                (INSTRUMENT_BIT), \
                (MODULE_ID), \
                (FILE_NAME), \
                (LINE_NUMBER), \
                (FUNCTION_NAME), \
                __VA_ARGS__)

/*i \ingroup RTILogModule
 * @brief Apply a verbosity filter, then print a LogMessage.
 *
 *  Main logging function. It is used per module for logging.
 *  Used to support all the production logging.
 *  It requires a RTILogMessage and a list of params.
 *  This function adds metadata for the printFormat. It can be configured by the
 *  argument formatMask to filter out selected formats.
 *  The instrumentBit represents the logLevel of the message.
 *
 * @param INSTRUMENT_MASK \b In. It is used to verbosity filter.
 * @param SUBMODULE_MASK \b In. It is used to category filter.
 * @param SUBMODULE_ID \b In. It is used to category filter.
 * @param FORMAT_MASK \b In. Filter out selected formats. Some examples of the
 * masks you can use are:
 *  - RTI_LOG_PRINT_FORMAT_MASK_NONE: no printFormat will be applied.
 *  - RTI_LOG_PRINT_FORMAT_MASK_ALL: the printFormat set by the user will
 *  be applied.
 * @INSTRUMENT_BIT \b In. It represents the logLevel of the message.
 *  It is used to get the printFormat of the logLevel.
 * @param MODULE_ID \b In. It is used for the printFormat RTI_LOG_PRINT_BIT_AT_MODULE.
 * @param ... \b In. A LogMessage and optionally list of params of the message.
 */
#define RTILogMessage_log( \
        /* Filtering-only params */ \
        INSTRUMENT_MASK, \
        SUBMODULE_MASK, \
        SUBMODULE_ID, \
        /* Print params */ \
        FORMAT_MASK, \
        INSTRUMENT_BIT, \
        MODULE_ID, \
        ...) \
    RTILogMessage_logWithParams( \
            (INSTRUMENT_MASK), \
            (SUBMODULE_MASK), \
            (SUBMODULE_ID), \
            (FORMAT_MASK), \
            (INSTRUMENT_BIT), \
            (MODULE_ID), \
            RTI_FILE_NAME, \
            RTI_LINE_NUMBER, \
            RTI_FUNCTION_NAME, \
            __VA_ARGS__)

/*i \ingroup RTILogModule
 * @brief Apply a verbosity filter, then print a LogMessage.
 *
 * It is the same function than RTILogMessage_log however here the
 * method name is not RTI_FUNCTION_NAME and it is passed as argument.
 *
 * @param INSTRUMENT_MASK \b In. It is used to verbosity filter.
 * @param SUBMODULE_MASK \b In. It is used to category filter.
 * @param formatMask \b In. Filter out selected formats. Some examples of the
 * masks you can use are:
 *  - RTI_LOG_PRINT_FORMAT_MASK_NONE: no printFormat will be applied.
 *  - RTI_LOG_PRINT_FORMAT_MASK_ALL: the printFormat set by the user will
 *  be applied.
 * @INSTRUMENT_BIT \b In. It represents the logLevel of the message.
 *  It is used to get the printFormat of the logLevel.
 * @param MODULE_ID \b In. It is used for the printFormat RTI_LOG_PRINT_BIT_AT_MODULE.
 * @FUNCTION_NAME \b In. It is used for the printFormat RTI_LOG_PRINT_BIT_AT_METHOD.
 * @param ... \b In. A LogMessage and optionally list of params of the message.
 */
#define RTILogMessage_logWithFunctionName( \
        /* Filtering-only params */ \
        INSTRUMENT_MASK, \
        SUBMODULE_MASK, \
        SUBMODULE_ID, \
        /* Print params */ \
        FORMAT_MASK, \
        INSTRUMENT_BIT, \
        MODULE_ID, \
        FUNCTION_NAME, \
        ...) \
    RTILogMessage_logWithParams( \
            (INSTRUMENT_MASK), \
            (SUBMODULE_MASK), \
            (SUBMODULE_ID), \
            (FORMAT_MASK), \
            (INSTRUMENT_BIT), \
            (MODULE_ID), \
            RTI_FILE_NAME, \
            RTI_LINE_NUMBER, \
            FUNCTION_NAME, \
            __VA_ARGS__)

/*i \ingroup RTILogModule
 * @brief Print an unformatted string without applying any kind of filtering.
 *
 *  Used to support test logging or printing functionality.
 *  It requires a parametrized string: format and a list of params.
 *  The instrumentBit represents the logLevel of the message.
 *
 * Used to support RTILogParamString_logUnformatted. It should not be used in
 * production code because we have better alternatives:
 * - To print unformatted and plain parametrized strings:
 *      RTILogParamString_printPlain.
 * - To print formatted parameterized strings:
 *      RTILogParamString_print.
 *
 * @param INSTRUMENT_BIT \b In. It represents the logLevel of the message.
 * @param ... \b In. A parameterized string and optionally list of params of
 * the parameterized string.
 *
 * @return The number of bytes printed, excluding NUL, or 0 on error.
 */
#define RTILogParamString_printUnformatted( \
        INSTRUMENT_BIT, \
        ...) \
    RTILogParamString_printWithParams( \
            RTI_LOG_PRINT_FORMAT_MASK_NONE, \
            (INSTRUMENT_BIT), \
            MODULE_LOG, \
            RTI_FILE_NAME, \
            RTI_LINE_NUMBER, \
            RTI_FUNCTION_NAME, \
            __VA_ARGS__)

/*i \ingroup RTILogModule
 * @brief Apply a verbosity filter, then print an unformatted string.
 *
 *  Used to support test logging.
 *  It requires a parametrized string: format and a list of params.
 *  The instrumentBit represents the logLevel of the message.
 *
 * It should not be used in production code because the logged string will lack
 * of a log message id. For verbosity-filtered logging in production code use
 * RTILogMessage logging APIs.
 *
 * @param INSTRUMENT_MASK \b In. It is used to verbosity filter.
 * @param SUBMODULE_MASK \b In. It is used to category filter.
 * @param SUBMODULE_ID \b In. It is used to category filter.
 * @param INSTRUMENT_BIT \b In. It represents the logLevel of the message.
 * @param parameterizedString \b In. It is a parameterized string determining
 *  the contents of the logged message.
 * @param ... \b In. A parameterized string and optionally list of params of
 * the parameterized string.
 */
#define RTILogParamString_logUnformatted( \
        /* Filtering-only params */ \
        INSTRUMENT_MASK, \
        SUBMODULE_MASK, \
        SUBMODULE_ID, \
        /* Print params */ \
        INSTRUMENT_BIT, \
        ...) \
    if (((INSTRUMENT_MASK) & (INSTRUMENT_BIT)) \
            && ((SUBMODULE_MASK) & (SUBMODULE_ID))) \
        RTILogParamString_printUnformatted( \
                (INSTRUMENT_BIT), \
                __VA_ARGS__)

/*i \ingroup RTILogModule
 * @brief Print an unformatted string without applying any kind of filtering.
 *
 *  Used to support test logging or printing functionality.
 *  It requires a parametrized string: format and a list of params.
 *  The logLevel used is NDDS_CONFIG_LOG_LEVEL_DEBUG
 *
 * @param ... \b In. A parameterized string and optionally list of params of
 * the parameterized string.
 *
 * @return The number of bytes printed, excluding NUL, or 0 on error.
 */
#define RTILogParamString_printPlain(...) \
    RTILogParamString_printWithParams( \
            RTI_LOG_PRINT_FORMAT_MASK_NONE, \
            RTI_LOG_BIT_NONE, \
            MODULE_LOG, \
            RTI_FILE_NAME, \
            RTI_LINE_NUMBER, \
            RTI_FUNCTION_NAME, \
            __VA_ARGS__)

/*i \ingroup RTILogModule
 * @brief Apply a verbosity filter, then print a string.
 *
 *  Used to support test logging.
 *  It requires a parametrized string: format and a list of params.
 *  This function adds metadata for the printFormat. It can be configured by the
 *  argument formatMask to filter out selected formats.
 *  The instrumentBit represents the logLevel of the message.
 *
 * It should not be used in production code because the logged string will lack
 * of a log message id. For verbosity-filtered logging in production code use
 * RTILogMessage logging APIs.
 *
 * @param INSTRUMENT_MASK \b In. It is used to verbosity filter.
 * @param SUBMODULE_MASK \b In. It is used to category filter.
 * @param SUBMODULE_ID \b In. It is used to category filter.
 * @param formatMask \b In. Filter out selected formats. Some examples of the
 * masks you can use are:
 *  - RTI_LOG_PRINT_FORMAT_MASK_NONE: no printFormat will be applied.
 *  - RTI_LOG_PRINT_FORMAT_MASK_ALL: the printFormat set by the user will
 *  be applied.
 * @param INSTRUMENT_BIT \b In. It represents the logLevel of the message.
 * @param MODULE_ID \b In. It is used for the printFormat RTI_LOG_PRINT_BIT_AT_MODULE.
 * @param ... \b In. A parameterized string and optionally list of params of
 * the parameterized string.
 */
#define RTILogParamString_log( \
        /* Filtering-only params */ \
        INSTRUMENT_MASK, \
        SUBMODULE_MASK, \
        SUBMODULE_ID, \
        /* Print params */ \
        FORMAT_MASK, \
        INSTRUMENT_BIT, \
        MODULE_ID, \
        ...) \
    if (((INSTRUMENT_MASK) & (INSTRUMENT_BIT)) \
            && ((SUBMODULE_MASK) & (SUBMODULE_ID))) \
        RTILogParamString_printWithParams( \
                (FORMAT_MASK), \
                (INSTRUMENT_BIT), \
                (MODULE_ID), \
                RTI_FILE_NAME, \
                RTI_LINE_NUMBER, \
                RTI_FUNCTION_NAME, \
                __VA_ARGS__)

/*i \ingroup RTILogModule
 * @brief Print a string without applying any kind of filtering.
 *
 *  Used to support test logging or printing functionality.
 *  It requires a format and a list of params.
 *  This function adds metadata for the printFormat. It can be configured by the
 *  argument formatMask to filter out selected formats.
 *  The instrumentBit represents the logLevel of the message.
 *
 * @param FORMAT_MASK \b In. Filter out selected formats. Some examples of the
 * masks you can use are:
 *  - RTI_LOG_PRINT_FORMAT_MASK_NONE: no printFormat will be applied.
 *  - RTI_LOG_PRINT_FORMAT_MASK_ALL: the printFormat set by the user will
 *  be applied.
 * @param INSTRUMENT_BIT \b In. It represents the logLevel of the message.
 * @param MODULE_ID \b In. It is used for the printFormat RTI_LOG_PRINT_BIT_AT_MODULE.
 * @param ... \b In. A parameterized string and optionally list of params of
 * the parameterized string.
 *
 * @return The number of bytes printed, excluding NUL, or 0 on error.
 */
#define RTILogParamString_print( \
        FORMAT_MASK, \
        INSTRUMENT_BIT, \
        MODULE_ID, \
        ...) \
    RTILogParamString_printWithParams( \
            (FORMAT_MASK), \
            (INSTRUMENT_BIT), \
            (MODULE_ID), \
            RTI_FILE_NAME, \
            RTI_LINE_NUMBER, \
            RTI_FUNCTION_NAME, \
            __VA_ARGS__)

/*i \ingroup RTILogModule
 * @brief Print an unformatted string without applying any kind of filtering.
 *  This function is used for printing unbounded strings without format.
 *  The logLevel used is NDDS_CONFIG_LOG_LEVEL_DEBUG.
 *  Used to support test logging or printing functionality.
 *
 * @param STRING \b In. The string to print
 * @param LENGTH \b In. The length of the string (excluding NUL byte)
 *
 * @return The number of bytes printed, excluding NUL, or 0 on error.
 */
#define RTILogString_printPlain(STRING, LENGTH) \
    RTILogString_printWithParams( \
            RTI_LOG_PRINT_FORMAT_MASK_NONE, \
            RTI_LOG_BIT_NONE, \
            MODULE_LOG, \
            RTI_FILE_NAME, \
            RTI_LINE_NUMBER, \
            RTI_FUNCTION_NAME, \
            (STRING), \
            (LENGTH))

/*i \ingroup RTILogModule
 * @brief Print a string without applying any kind of filtering.
 *  This function is used for printing unbounded message.
 *  This function adds metadata for the printFormat. It can be configured by the
 *  argument formatMask to filter out selected formats.
 *  The instrumentBit represents the logLevel of the message.
 *  Used to support test logging or printing functionality.
 *
 * @param FORMAT_MASK \b In. Filter out selected formats. Some examples of the
 * masks you can use are:
 *  - RTI_LOG_PRINT_FORMAT_MASK_NONE: no printFormat will be applied.
 *  - RTI_LOG_PRINT_FORMAT_MASK_ALL: the printFormat set by the user will
 *  be applied.
 * @param INSTRUMENT_BIT \b In. It represents the logLevel of the message.
 * @param STRING \b In. The string to print
 * @param LENGTH \b In. The length of the string (excluding NUL byte)
 *
 * @return The number of bytes printed, excluding NUL, or 0 on error.
 */
#define RTILogString_print( \
        FORMAT_MASK, \
        INSTRUMENT_BIT, \
        STRING, \
        LENGTH) \
    RTILogString_printWithParams( \
            (FORMAT_MASK), \
            (INSTRUMENT_BIT), \
            MODULE_LOG, \
            RTI_FILE_NAME, \
            RTI_LINE_NUMBER, \
            RTI_FUNCTION_NAME, \
            (STRING), \
            (LENGTH))

#ifdef RTI_PRECONDITION_TEST
  #define RTILog_checkPrecondition(MODULE, preconditionExpression, failAction) \
    if (preconditionExpression) { \
        MODULE##Log_logPreconditionFailedWExpr(#preconditionExpression); \
        if (RTILog_g_detectPrecondition) { \
            RTILog_g_preconditionDetected = 1; \
        } \
        failAction; \
    }
#else /* do nothing */
  #define RTILog_checkPrecondition(MODULE, preconditionExpression, failAction)
#endif

/*
 * Only in the PURIFY_TEST:
 *    - When RTI_startFunction() is called, 1Byte is allocated.
 *    - When RTI_return()/RTI_endFunction() is called, we free that 1Byte.
 * We do this to check that functions calling to RTI_startFunction always do a
 * RTI_return for all the return code paths.
 */
#ifdef PURIFY_TEST
  #define RTILog_purifyOnlyAlloc() \
    char *__validateStartEndFunction = malloc(1);
  #define RTILog_purifyOnlyFree() \
    if (__validateStartEndFunction != NULL) { \
        free(__validateStartEndFunction); \
    }
#else
  #define RTILog_purifyOnlyAlloc() \
    ((void) 0);
  #define RTILog_purifyOnlyFree() \
    ((void) 0);
#endif

/**
 * If PURIFY_TEST is defined: trigger a leak, if not, noop. Useful to track
 * unexpected errors and make valgrind malloc plan to fail and generate a
 * report.
 */
#ifdef PURIFY_TEST
#define RTILog_triggerPurifyOnlyLeak() \
{ \
    char *__forcedLeakedMemory; \
    __forcedLeakedMemory = malloc(1); \
    (void) __forcedLeakedMemory; \
} (void) 0
#else
#define RTILog_triggerPurifyOnlyLeak() \
    ((void) 0)
#endif

/* This macro should be called at the begining of every function. */
#define RTI_startFunction() \
    RTILog_purifyOnlyAlloc(); \
    /*                                                                         \
     * RTIOsapiThread_addFunctionToDebugInfo will be executed                  \
     * if RTI_FUNCTION_HISTORY_SUPPORTED is defined                            \
     */                                                                        \
    RTIOsapiThread_addFunctionToDebugInfo((void *) RTI_FUNCTION_NAME);

/* This macro should be called at the end of every function. */
#define RTI_endFunction() \
    RTILog_purifyOnlyFree();

/* This macro calls RTI_endFunction() and do the "return" action. */
#define RTI_return(returnValue) \
    RTI_endFunction(); \
    return returnValue;

#define RTILog_testPrecondition(MODULE, preconditionExpression, failAction) \
    /*                                                                         \
     * RTIOsapiThread_addFunctionToDebugInfo will be executed                  \
     * if RTI_FUNCTION_HISTORY_SUPPORTED is defined                            \
     */                                                                        \
    RTIOsapiThread_addFunctionToDebugInfo((void *) RTI_FUNCTION_NAME); \
    RTILog_checkPrecondition(MODULE, preconditionExpression, failAction)


extern RTILogDllExport void RTILog_flush(void);

extern RTILogDllExport void
RTILog_registerOnMessageMethod(RTILogOnMessageMethod onMsgMethod);

extern RTILogDllExport
RTILogOnMessageMethod RTILog_getDefaultOnMessageMethod(void);

extern RTILogDllExport int RTILog_onAssert(void);

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_NULL_OBJECT;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_ADD_FAILURE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_ALREADY_CREATED_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_ALREADY_DESTROYED_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_ALREADY_INITIALIZED_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_ANY_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_ANY_ss;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_ANY_sssd;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_ANY_FAILURE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_ANY_FAILURE_ss;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_ASSERT_FAILURE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_UNEQUAL_INT_sdd;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_UNEQUAL_STRING_sss;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_RETCODE_NOT_OK_ss;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_CREATE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_CREATION_FAILURE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_CREATION_FAILURE_ss;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_ENABLE_FAILURE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_DELETE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_DELETE_REQUESTED_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_DESTRUCTION_FAILURE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_DISABLE_FAILURE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_FINALIZE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_GET_FAILURE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_GET_FAILURE_ss;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_SET_FAILURE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_SET_FAILURE_ss;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_INIT_FAILURE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_INSUFFICIENT_SPACE_FAILURE_dd;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_INSUFFICIENT_SPACE_FAILURE_uu;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_INVALID_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_LISTENER_MASK_NONE_WARN;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_UNEXPECTED_PROPERTY_ssss;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_UNEXPECTED_PROPERTY_sssss;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_INCONSISTENT_PROPERTY_s;

extern RTILogDllVariable
const struct RTILogMessage RTI_LOG_INVARIANCE_VIOLATION;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_MALLOC_FAILURE_d;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_GETRLIMIT_FAILURE;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_EXCEED_HEAP_FAILURE_uu;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_MUTEX_GIVE_FAILURE;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_MUTEX_TAKE_FAILURE;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_OS_FAILURE_sXs;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_PRECONDITION_FAILURE;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_PRECONDITION_FAILURE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_REFERENCE_COUNT_sd;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_REMOVE_FAILURE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_SEMAPHORE_GIVE_FAILURE;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_SEMAPHORE_TAKE_FAILURE;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_SINGLETON_VIOLATION_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_SKIP_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_SLEEP_FAILURE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_STOP_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_FATAL_EXCEPTION;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_UNEXPECTED_EXCEPTION;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_UNEXPECTED_VALUE_sd;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_SYSTEM_FAILURE_d;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_TIMESTAMP_xX;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_BAD_STRING_FORMAT_ss;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_CONTEXT_ENTER_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_CONTEXT_LEAVE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_PARSER_ARGUMENT_MISSING_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_PARSER_FAILURE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_PARSER_FAILURE_ss;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_PARSER_VALUE_OUT_OF_RANGE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_PARSER_VALUE_OUT_OF_RANGE_ss;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_PARSER_NUMERIC_CONVERSION_FAILURE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_PARSER_NUMERIC_CONVERSION_FAILURE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_ANY_CONTACT_SUPPORT_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_NOT_SUPPORTED_CONTACT_SUPPORT_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_TRUNCATED_STRING_sds;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_ASSOCIATE_WORKER_FAILURE;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_ASSOCIATE_WORKER_FAILURE_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_TIMEOUT_EXPIRED_s;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_INDEX_ARRAY_OUT_OF_BOUNDS_sddd;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_REACHED_MAX_sd;

extern RTILogDllVariable const struct RTILogMessage RTI_LOG_PROPERTY_NOT_FOUND_s;

extern RTILogDllVariable RTILogPrintFormatKindMask RTILog_printMask[RTI_LOG_COUNT_LOG_LEVELS];

extern RTILogDllExport RTILogPrintFormatKindMask RTILog_getPrintMask(void);

extern RTILogDllExport void RTILog_setPrintMask(RTILogPrintFormatKindMask mask);

extern RTILogDllExport void RTILog_appendPrintMask(RTILogPrintFormatKindMask mask);

extern RTILogDllExport void RTILog_setPrintMaskByLogLevel(
        RTILogPrintFormatKindMask mask,
        RTILogLevel logLevel);

extern RTILogDllExport RTILogPrintFormatKindMask RTILog_getPrintMaskByLogLevel(RTILogLevel logLevel);

typedef enum {
    RTI_LOG_BACKTRACE_DETAIL_LEVEL_AUTO = 0,
    RTI_LOG_BACKTRACE_DETAIL_LEVEL_BEST_SPEED = 1,
    RTI_LOG_BACKTRACE_DETAIL_LEVEL_BEST_DETAIL = 2
} RTILogBacktraceDetailLevel;

typedef void (*RTILogBacktraceMethod)(
        int index,
        RTILogBacktraceDetailLevel detailLevel);

extern RTILogDllVariable RTILogBacktraceMethod RTILog_logBacktrace;

typedef void (*RTILogAddToFunctionHistoryMethod)(void *pointerFuncName);

extern RTILogDllVariable RTILogAddToFunctionHistoryMethod RTILog_addToFunctionHistory;

typedef void (*RTILogFunctionHistoryMethod)(void);

extern RTILogDllVariable RTILogFunctionHistoryMethod RTILog_logFunctionHistory;

typedef void (*RTILogOnFatalErrorListenerMethod)(void *data);

extern RTILogDllVariable RTILogOnFatalErrorListenerMethod RTILog_onFatalErrorListenerMethod;

extern RTILogDllExport int RTILog_snprintf(
        char *str,
        int size,
        const char *format,
        ...);

extern RTILogDllExport
void RTILog_setOnFatalErrorListener(
        RTILogOnFatalErrorListenerMethod method,
        void *data);

extern RTILogDllVariable int RTILog_g_preconditionDetected;

extern RTILogDllVariable int RTILog_g_detectPrecondition;


#ifdef __cplusplus
    }	/* extern "C" */
#endif

#endif /* log_common_h */
