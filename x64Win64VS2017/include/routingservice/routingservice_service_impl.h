/* (c) Copyright 2003-2021, Real-Time Innovations, Inc. All rights reserved. */
/*
 * @(#)routingservice_service_impl.h    generated by: makeheader    Fri Apr 23 01:06:17 2021
 *
 *		built from:	service_impl.ifc
 */

#ifndef routingservice_service_impl_h
#define routingservice_service_impl_h



#ifndef router_dll_h
    #include "routingservice/routingservice_dll.h"
#endif

#ifndef advlog_context_h
    #include "advlog/advlog_context.h"
#endif
    
#ifndef rtixmlutils_object_h
    #include "rtixmlutils/rtixmlutils_object.h"
#endif

#ifndef rtixmlutils_property_h
    #include "rtixmlutils/rtixmlutils_property.h"
#endif

#ifndef routingservice_service_h
    #include "routingservice/routingservice_service.h"
#endif

#ifndef routingservice_remote_config_h
    #include "routingservice/routingservice_remote_config.h"
#endif
    
#ifndef routingservice_monitoring_h
    #include "routingservice/routingservice_monitoring.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif



#define RTI_SERVICE_XML_SUPPORT_SAVE_PI_NAME "rti-object-save"


typedef enum {
    RTI_ROUTING_SERVICE_SERVICE_ENTITY,
    RTI_ROUTING_SERVICE_DOMAIN_ROUTE_ENTITY,
    RTI_ROUTING_SERVICE_CONNECTION_ENTITY,
    RTI_ROUTING_SERVICE_SESSION_ENTITY,
    RTI_ROUTING_SERVICE_AUTO_TOPIC_ROUTE_ENTITY,
    RTI_ROUTING_SERVICE_TOPIC_ROUTE_ENTITY,
    RTI_ROUTING_SERVICE_INPUT_ENTITY,
    RTI_ROUTING_SERVICE_OUTPUT_ENTITY,
    RTI_RoutingServiceEntityKind_count,
    RTI_RoutingServiceEntityKind_OTHER = RTI_RoutingServiceEntityKind_count
} RTI_RoutingServiceEntityKind;



struct RTI_RoutingServiceDescription {
    const struct RTI_RoutingServiceProperty *property;
    struct RTI_RoutingServiceEntityListener *entity_listener;
    struct RTI_RoutingServiceConfigInterceptor *config_interceptor;
    DDS_Boolean enable_entity_advlog_context;
    DDS_ServiceQosPolicyKind service_kind;
};


#define RTI_RoutingServiceDescription_INITIALIZER {\
    NULL, \
    NULL, \
    NULL, \
    DDS_BOOLEAN_FALSE, \
    DDS_NO_SERVICE_QOS}

extern ROUTERDllExport
struct RTI_RoutingService *
RTI_RoutingService_new_from_description(
        struct RTI_RoutingServiceDescription *description);

extern ROUTERDllExport
struct RTI_RoutingServiceProcessor *
RTI_RoutingService_lookup_processor(
        struct RTI_RoutingService * self,
        const char * processor_full_name);

extern ROUTERDllExport
DDS_Boolean RTI_RoutingService_set_config_interceptor(
        struct RTI_RoutingService * self,
        struct RTI_RoutingServiceConfigInterceptor * config_interceptor);

extern ROUTERDllExport
void RTI_RoutingService_execute_command(
        struct RTI_RoutingService * self,
        struct RTI_Service_Admin_CommandReply ** reply,
        const struct RTI_Service_Admin_CommandRequest * request);

extern ROUTERDllExport
void RTI_RoutingService_return_reply(
        struct RTI_RoutingService * self,
        struct RTI_Service_Admin_CommandReply * reply);

extern ROUTERDllExport
DDS_DomainParticipant * RTI_RoutingService_create_remote_admin_participant(
        int domain_id,
        struct DDS_DomainParticipantQos * participant_qos,
        const char *service_name,
        DDS_ServiceQosPolicyKind service_kind);

extern ROUTERDllExport
DDS_Boolean RTI_RoutingService_create_entity(
    struct RTI_RoutingService * self,
    const char * parent_name,
    const char * file_name,
    const char * xml_snippet);

extern ROUTERDllExport
DDS_Boolean RTI_RoutingService_delete_entity(
    struct RTI_RoutingService * self,
    const char * entity_name);

extern ROUTERDllExport
char * RTI_RoutingService_get_configuration(
    struct RTI_RoutingService * self);

extern ROUTERDllExport
void RTI_RoutingService_free_string(char * str);

extern ROUTERDllExport
struct RTI_RoutingServiceAdminReplier * RTI_RoutingService_get_admin_replier(
        struct RTI_RoutingService * self);


struct RTI_RoutingServiceProductInfo {
    char * executable_name;
    const char * shell_executable_name;
    char * product_name;
    char * log_product_name;
    char * default_app_name;
};

extern ROUTERDllExport
void RTI_RoutingService_set_product_info(struct RTI_RoutingServiceProductInfo *info);

extern ROUTERDllExport
void RTI_RoutingService_reset_product_info(void);

extern ROUTERDllExport
const struct RTI_RoutingServiceProductInfo* RTI_RoutingService_get_product_info(void);

extern ROUTERDllExport
void RTI_RoutingService_print_available_config(
        struct RTI_RoutingServiceProperty *property);

extern ROUTERDllExport
DDS_Boolean RTI_RoutingService_convert_xml_legacy(
        const struct RTI_RoutingServiceProperty *property,
        const char *output_path);

extern ROUTERDllExport
DDS_Boolean RTI_RoutingService_expand_xml_variables(
        struct RTIXMLUTILSObject *xml_object,        
        const struct RTI_RoutingServiceProperties *dictionary);

extern ROUTERDllExport
struct RTIXMLUTILSObject* 
RTI_RoutingService_lookup_xml_entity(
        struct RTI_RoutingService *self,
        RTI_RoutingServiceEntityKind expected_entity_kind,
        const char *xml_entity_full_name);

extern ROUTERDllVariable
const char * RTI_ROUTING_SERVICE_XML_AUTOROUTE_FQN_PI_NAME;



#define RTI_SERVICE_INVALID_ENTITY_STATE RTI_Service_EntityStateKind_INVALID
#define RTI_SERVICE_ENABLED_ENTITY_STATE RTI_Service_EntityStateKind_ENABLED
#define RTI_SERVICE_DISABLED_ENTITY_STATE RTI_Service_EntityStateKind_DISABLED
#define RTI_SERVICE_STARTED_ENTITY_STATE RTI_Service_EntityStateKind_STARTED
#define RTI_SERVICE_STOPPED_ENTITY_STATE RTI_Service_EntityStateKind_STOPPED
#define RTI_SERVICE_RUNNING_ENTITY_STATE RTI_Service_EntityStateKind_RUNNING
#define RTI_SERVICE_PAUSED_ENTITY_STATE RTI_Service_EntityStateKind_PAUSED



#define ROUTER_SERVICE_CONTEXT_ENTRY_SIZE_DEFAULT 4
#define ROUTER_SERVICE_CONTEXT_LIST_PARAMS_SIZE_DEFAULT 5


struct RTI_RoutingServiceEntityListenerContext {
    RTI_RoutingServiceEntityKind entity_kind;
    const char *entity_name;
    RTI_Service_EntityStateKind entity_state_kind;
    DDS_Boolean ok;
    /*
     * We need to keep the entries of the context because they are entered in a
     * function and left in another function.
     * The number of entries is two:
     *  - An entry for the resource.
     *  - An entry for the activity.
     *
     * Cloud Discovery Service:
     *  The entries are entered into the context using the macro
     *  CDS_ENTITY_LISTENER_CONTEXT_ENTER_ON_BEFORE in a function.
     *  The entries are left using the macro
     *  CDS_ENTITY_LISTENER_CONTEXT_LEAVE_ON_AFTER in another function.
     *  For example:
     *      - Enter in RTI_CDSEntityListener_onBeforeCreate
     *      - Leave in RTI_CDSEntityListener_onAfterCreate
     *
     * Recorder:
     *  The entries are entered into the context using the macro
     *  RTI_ENTITY_LISTENER_CONTEXT_ENTER_ON_BEFORE in a function.
     *  The entries are left using the macro
     *  RTI_ENTITY_LISTENER_CONTEXT_LEAVE_ON_AFTER in another function.
     *  For example:
     *      - Enter in EntityListener::on_before_create
     *      - Leave in EntityListener::on_after_create
     */
    struct RTIOsapiActivityContextStackEntry logging_context_entries[ROUTER_SERVICE_CONTEXT_ENTRY_SIZE_DEFAULT];
    const void *logging_context_params[ROUTER_SERVICE_CONTEXT_LIST_PARAMS_SIZE_DEFAULT];
};


#define RTI_RoutingServiceEntityListenerContext_INITIALIZER {\
        RTI_RoutingServiceEntityKind_OTHER, \
        NULL, \
        RTI_SERVICE_INVALID_ENTITY_STATE, \
        DDS_BOOLEAN_FALSE \
}


typedef void (*RTI_RoutingServiceEntityListener_OnCreateEntityFcn)(
        void *listener_data,
        struct RTI_RoutingServiceEntityListenerContext *context);


typedef void (*RTI_RoutingServiceEntityListener_OnStateChangeFcn)(
        void *listener_data,
        struct RTI_RoutingServiceEntityListenerContext *context);


typedef void (*RTI_RoutingServiceEntityListener_OnDeleteEntityFcn)(
        void *listener_data,
        struct RTI_RoutingServiceEntityListenerContext *context);


typedef void (*RTI_RoutingServiceEntityListener_OnStreamEventFcn)(
        void *listener_data,
        struct RTI_RoutingServiceEntityListenerContext *context,
        const struct RTI_RoutingServiceStreamInfo *stream_info);


struct RTI_RoutingServiceEntityListener {
    /* @brief implementation data */
    void *listener_data;
    /* @brief handles the before creation of an entity*/
    RTI_RoutingServiceEntityListener_OnCreateEntityFcn
            on_before_create;
    /* @brief handles the before creation of an entity*/
    RTI_RoutingServiceEntityListener_OnCreateEntityFcn
            on_after_create;
    /* @brief handles the before state change of an entity*/
    RTI_RoutingServiceEntityListener_OnStateChangeFcn
            on_before_state_change;
     /* @brief handles the before state change of an entity*/
    RTI_RoutingServiceEntityListener_OnStateChangeFcn
            on_after_state_change;
    /* @brief handles the before deletion of an entity*/
    RTI_RoutingServiceEntityListener_OnDeleteEntityFcn
            on_before_delete;
    /* @brief handles the before deletion of an entity*/
    RTI_RoutingServiceEntityListener_OnDeleteEntityFcn
            on_after_delete;
    /* @brief handles the before stream event notification*/
    RTI_RoutingServiceEntityListener_OnStreamEventFcn
            on_before_stream_event;
    /* @brief handles the after stream event notification*/
    RTI_RoutingServiceEntityListener_OnStreamEventFcn
            on_after_stream_event;
};


#define RTI_RoutingServiceEntityListener_INITIALIZER {\
        NULL, \
        NULL, \
        NULL, \
        NULL, \
        NULL, \
        NULL, \
        NULL, \
        NULL, \
        NULL}

extern ROUTERDllExport
DDS_Boolean RTI_RoutingService_set_entity_listener(
        struct RTI_RoutingService *self,
        const struct RTI_RoutingServiceEntityListener *listener);

extern ROUTERDllExport
DDS_Boolean RTI_RoutingService_begin_update(
        struct RTI_RoutingService *self);

extern ROUTERDllExport
DDS_Boolean RTI_RoutingService_end_update(
        struct RTI_RoutingService *self);

extern ROUTERDllExport
DDS_Boolean RTI_RoutingService_detach_route(
        struct RTI_RoutingService *self,
        RTI_RoutingServiceRoute *route);

extern ROUTERDllExport
DDS_Boolean RTI_RoutingService_attach_route(
        struct RTI_RoutingService *self,
        RTI_RoutingServiceRoute *route);

extern ROUTERDllExport
DDS_Boolean RTI_RoutingService_suspend_sessions(
        struct RTI_RoutingService *self);

extern ROUTERDllExport
DDS_Boolean RTI_RoutingService_resume_sessions(
        struct RTI_RoutingService *self);


#define  RTI_ROUTING_SERVICE_PREPROCESS_XSLT_PATH_PROPERTY_NAME \
        RTI_ROUTING_SERVICE_PROPERTY_PREFIX".preprocess.xslt.path"


struct RTI_RoutingServiceHeapMonitorProperty {
    /* @brief Output directory where files are dumped */
    char *output_dir;
    /* @brief A name to be used in the snapshot files */
    char *snapshot_name;
    /* @brief Period at which snapshots are taken */
    int snapshot_period_millis;
};


#define RTI_RoutingServiceHeapMonitorProperty_INITIALIZER {NULL, NULL, 0}

extern ROUTERDllExport
void RTI_RoutingService_execute_heap_snapshot_loop(
        const struct RTI_RoutingServiceHeapMonitorProperty *property,
        int stop_after_sec,
        DDS_Boolean *exit_loop_flag);

extern ROUTERDllExport
void RTI_RoutingServiceLogger_log_with_mask(
        RTILogBitmap instrumentation_mask,
        NDDS_Config_LogLevel log_level,
        const char *format,
        ...);

extern ROUTERDllExport 
void RTI_RoutingServiceLogger_vlog_with_mask(
        RTILogBitmap verbosityMask,
        NDDS_Config_LogLevel logLevel,
        const char *format,
        va_list ap);

extern ROUTERDllExport
void RTI_RoutingServiceLogger_set_verbosity(
        NDDS_Config_LogVerbosity verbosity);

extern ROUTERDllExport
DDS_Boolean RTI_RoutingServiceProperties_from_xml_property_list(
        struct RTI_RoutingServiceProperties *dest,
        struct RTIXMLUTILSPropertyList *source);


  #ifdef __cplusplus
    }	/* extern "C" */
  #endif

#endif /* routingservice_service_impl_h */
